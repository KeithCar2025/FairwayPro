{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines: PGA Golf Coach Platform\n\n## Design Approach\n**Reference-Based Approach** - Drawing inspiration from Airbnb's marketplace design patterns and booking flow, combined with modern service discovery platforms. This approach suits the experience-focused nature of connecting students with coaches and the trust-building requirements of the platform.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Light Mode: 142 69% 58% (Golf course green)\n- Dark Mode: 142 45% 35% (Deeper forest green)\n\n**Neutral Colors:**\n- Light backgrounds: 0 0% 98%\n- Dark backgrounds: 220 13% 9%\n- Text: High contrast grays\n\n**Accent Colors:**\n- Success/Rating: 142 69% 58% (matches primary)\n- Warning/Pending: 43 74% 49% (Golden yellow for premium feel)\n\n### Typography\n- **Primary Font:** Inter (Google Fonts) - clean, professional readability\n- **Headings:** 600-700 weight for coach names and section titles\n- **Body Text:** 400-500 weight for descriptions and details\n- **Price Display:** 600 weight for emphasis\n\n### Layout System\n**Tailwind Spacing Units:** Consistent use of 4, 6, 8, and 12 units\n- `p-4, p-6` for component padding\n- `gap-6, gap-8` for grid and flex layouts\n- `h-12, h-16` for button and input heights\n- `mb-8, mt-6` for section spacing\n\n### Component Library\n\n**Navigation:**\n- Mobile-first hamburger menu with slide-out drawer\n- Search bar prominently featured in header\n- Location indicator showing current search radius\n\n**Coach Cards:**\n- Grid layout (1 column mobile, 2-3 desktop)\n- Profile image (circular, 80px mobile, 120px desktop)\n- Star rating display with review count\n- Price per lesson prominently displayed\n- Distance from user location\n- Quick \"Book Now\" CTA button\n\n**Search & Filters:**\n- Location input with autocomplete\n- Distance radius slider (5, 10, 25, 50 miles)\n- Price range filter\n- Availability filter (today, this week, flexible)\n- Rating threshold filter\n\n**Booking Interface:**\n- Calendar view with available time slots\n- Lesson type selection (beginner, intermediate, advanced)\n- Duration options (30min, 60min, 90min)\n- Location preference (driving range, course, etc.)\n\n**Authentication:**\n- Modal-based login/signup\n- Separate coach registration flow with PGA verification\n- Clean form design with clear field validation\n\n**Rating System:**\n- 5-star rating component with hover states\n- Text review area with character limits\n- Photo upload option for lesson highlights\n\n### Mobile Optimization\n- Touch-friendly tap targets (minimum 44px)\n- Swipeable coach cards on mobile\n- Collapsible filter drawer\n- Bottom navigation for key actions\n- One-handed usage considerations\n\n### Trust & Safety Elements\n- PGA certification badges\n- Verified profile indicators\n- Review authenticity markers\n- Secure payment badges\n- Coach response time indicators\n\n### Animations\n**Minimal and Purposeful:**\n- Smooth page transitions between search and booking\n- Gentle hover effects on coach cards\n- Loading states for search results\n- Success animations for completed bookings\n\n### Images\n**Coach Profile Images:**\n- Professional headshots, circular crop\n- Consistent sizing and quality standards\n- Fallback avatar for new coaches\n\n**Hero Section:**\n- Large hero image of golf course or coaching session\n- Overlay with search functionality\n- Gradient overlay for text readability\n\n**Background Elements:**\n- Subtle golf-related patterns or textures\n- Course imagery used sparingly for ambiance\n- Focus on clean, uncluttered layouts\n\nThis design creates a trustworthy, professional platform that emphasizes ease of discovery and booking while maintaining the premium feel appropriate for professional golf instruction services.","size_bytes":3677},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertCoachSchema, insertStudentSchema, insertBookingSchema, insertReviewSchema } from \"@shared/schema\";\nimport { fetchGoogleReviewsData, isValidGoogleReviewsUrl } from \"@shared/googleReviews\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage.js\";\nimport { ObjectPermission } from \"./objectAcl.js\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session middleware for authentication\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      sameSite: 'lax',\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }));\n\n  // Authentication Routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      \n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists with this email\" });\n      }\n\n      // SECURITY: Always create new users as 'student' role only\n      // Admin users must be created manually by existing admins\n      const userData = { email, password, role: \"student\" };\n      const user = await storage.createUser(userData);\n      (req.session as any).userId = user.id;\n      \n      res.json({ user: { id: user.id, email: user.email, role: user.role } });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ error: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      \n      const user = await storage.verifyPassword(email, password);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Regenerate session to prevent session fixation attacks\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration failed:\", err);\n        }\n        (req.session as any).userId = user.id;\n        res.json({ user: { id: user.id, email: user.email, role: user.role } });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Check authentication status\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n\n      res.json({ user: { id: user.id, email: user.email, role: user.role } });\n    } catch (error) {\n      console.error(\"Auth check error:\", error);\n      res.status(500).json({ error: \"Authentication check failed\" });\n    }\n  });\n\n  // Coach Registration and Profile Routes\n  app.post(\"/api/coaches/register\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'coach') {\n        return res.status(403).json({ error: \"Only users with coach role can create coach profiles\" });\n      }\n\n      const coachData = insertCoachSchema.parse({ ...req.body, userId });\n      const coach = await storage.createCoach(coachData);\n      \n      // Handle specialties, tools, certifications, videos\n      const { specialties = [], tools = [], certifications = [], videos = [] } = req.body;\n      \n      // Persist specialties\n      for (const specialty of specialties) {\n        await storage.createCoachSpecialty(coach.id, specialty);\n      }\n      \n      // Persist tools\n      for (const tool of tools) {\n        await storage.createCoachTool(coach.id, tool);\n      }\n      \n      // Persist certifications\n      for (const certification of certifications) {\n        await storage.createCoachCertification(coach.id, certification);\n      }\n      \n      // Persist videos\n      for (const video of videos) {\n        await storage.createCoachVideo(coach.id, video);\n      }\n      \n      res.json({\n        message: \"Coach registration successful! Your profile is pending admin approval. You will be notified once approved and your profile will become visible to students.\",\n        coach,\n        specialties,\n        tools, \n        certifications,\n        videos,\n        status: \"pending_approval\"\n      });\n    } catch (error) {\n      console.error(\"Coach registration error:\", error);\n      res.status(400).json({ error: \"Coach registration failed\" });\n    }\n  });\n\n  app.get(\"/api/coaches/:id\", async (req, res) => {\n    try {\n      const coach = await storage.getCoachWithDetails(req.params.id);\n      if (!coach) {\n        return res.status(404).json({ error: \"Coach not found\" });\n      }\n      res.json(coach);\n    } catch (error) {\n      console.error(\"Get coach error:\", error);\n      res.status(500).json({ error: \"Failed to fetch coach\" });\n    }\n  });\n\n  app.put(\"/api/coaches/:id\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const coach = await storage.getCoach(req.params.id);\n      if (!coach || coach.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to update this coach profile\" });\n      }\n\n      const updates = insertCoachSchema.partial().parse(req.body);\n      const updatedCoach = await storage.updateCoach(req.params.id, updates);\n      \n      res.json(updatedCoach);\n    } catch (error) {\n      console.error(\"Update coach error:\", error);\n      res.status(400).json({ error: \"Failed to update coach profile\" });\n    }\n  });\n\n  // Coach Search Routes\n  app.get(\"/api/coaches/search\", async (req, res) => {\n    try {\n      const { location, specialties, minPrice, maxPrice, rating, tools } = req.query;\n      \n      const searchParams: any = {};\n      \n      if (location) searchParams.location = location as string;\n      if (minPrice && maxPrice) {\n        searchParams.priceRange = { \n          min: parseFloat(minPrice as string), \n          max: parseFloat(maxPrice as string) \n        };\n      }\n      if (rating) searchParams.rating = parseFloat(rating as string);\n      if (specialties) {\n        searchParams.specialties = Array.isArray(specialties) \n          ? specialties as string[] \n          : [specialties as string];\n      }\n      if (tools) {\n        searchParams.tools = Array.isArray(tools) \n          ? tools as string[] \n          : [tools as string];\n      }\n\n      const coaches = await storage.searchCoaches(searchParams);\n      res.json(coaches);\n    } catch (error) {\n      console.error(\"Coach search error:\", error);\n      res.status(500).json({ error: \"Coach search failed\" });\n    }\n  });\n\n  // Google Reviews Routes\n  app.post(\"/api/coaches/fetch-google-reviews\", async (req, res) => {\n    try {\n      const { googleReviewsUrl } = req.body;\n      \n      if (!googleReviewsUrl) {\n        return res.status(400).json({ error: \"Google Reviews URL is required\" });\n      }\n\n      if (!isValidGoogleReviewsUrl(googleReviewsUrl)) {\n        return res.status(400).json({ error: \"Invalid Google Reviews URL format\" });\n      }\n\n      const reviewsData = await fetchGoogleReviewsData(googleReviewsUrl);\n      \n      if (!reviewsData.isValid) {\n        return res.status(400).json({ error: reviewsData.error || \"Failed to fetch Google Reviews data\" });\n      }\n\n      res.json({\n        rating: reviewsData.rating,\n        reviewCount: reviewsData.reviewCount,\n        businessName: reviewsData.businessName,\n        isValid: reviewsData.isValid\n      });\n    } catch (error) {\n      console.error(\"Google Reviews fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch Google Reviews data\" });\n    }\n  });\n\n  app.post(\"/api/coaches/:id/sync-google-reviews\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const coach = await storage.getCoach(req.params.id);\n      if (!coach) {\n        return res.status(404).json({ error: \"Coach not found\" });\n      }\n\n      // Check if user owns this coach profile or is admin\n      const user = await storage.getUser(userId);\n      if (coach.userId !== userId && user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Unauthorized to update this coach profile\" });\n      }\n\n      if (!coach.googleReviewsUrl) {\n        return res.status(400).json({ error: \"No Google Reviews URL set for this coach\" });\n      }\n\n      const reviewsData = await fetchGoogleReviewsData(coach.googleReviewsUrl);\n      \n      if (!reviewsData.isValid) {\n        return res.status(400).json({ error: reviewsData.error || \"Failed to fetch Google Reviews data\" });\n      }\n\n      // Update coach with Google Reviews data\n      await storage.updateCoachGoogleReviews(req.params.id, {\n        googleRating: reviewsData.rating,\n        googleReviewCount: reviewsData.reviewCount,\n        lastGoogleSync: new Date()\n      });\n\n      res.json({\n        message: \"Google Reviews data synced successfully\",\n        rating: reviewsData.rating,\n        reviewCount: reviewsData.reviewCount,\n        lastSynced: new Date()\n      });\n    } catch (error) {\n      console.error(\"Google Reviews sync error:\", error);\n      res.status(500).json({ error: \"Failed to sync Google Reviews data\" });\n    }\n  });\n\n  // Student Profile Routes  \n  app.post(\"/api/students/register\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const studentData = insertStudentSchema.parse({ ...req.body, userId });\n      const student = await storage.createStudent(studentData);\n      \n      res.json(student);\n    } catch (error) {\n      console.error(\"Student registration error:\", error);\n      res.status(400).json({ error: \"Student registration failed\" });\n    }\n  });\n\n  app.get(\"/api/students/me\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const student = await storage.getStudentByUserId(userId);\n      res.json(student);\n    } catch (error) {\n      console.error(\"Get student error:\", error);\n      res.status(500).json({ error: \"Failed to fetch student profile\" });\n    }\n  });\n\n  // Booking Routes\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const student = await storage.getStudentByUserId(userId);\n      if (!student) {\n        return res.status(400).json({ error: \"Student profile required for booking\" });\n      }\n\n      const bookingData = insertBookingSchema.parse({ \n        ...req.body, \n        studentId: student.id \n      });\n      \n      const booking = await storage.createBooking(bookingData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Booking creation error:\", error);\n      res.status(400).json({ error: \"Failed to create booking\" });\n    }\n  });\n\n  app.get(\"/api/bookings/student\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const student = await storage.getStudentByUserId(userId);\n      if (!student) {\n        return res.json([]);\n      }\n\n      const bookings = await storage.getBookingsByStudent(student.id);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Get student bookings error:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get(\"/api/bookings/coach\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (user?.role !== 'coach') {\n        return res.status(403).json({ error: \"Only coaches can access coach bookings\" });\n      }\n\n      const coach = await storage.getCoach(userId);\n      if (!coach) {\n        return res.json([]);\n      }\n\n      const bookings = await storage.getBookingsByCoach(coach.id);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Get coach bookings error:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Review Routes\n  app.post(\"/api/reviews\", async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      if (!userId) {\n        return res.status(401).json({ error: \"Not authenticated\" });\n      }\n\n      const student = await storage.getStudentByUserId(userId);\n      if (!student) {\n        return res.status(400).json({ error: \"Student profile required for reviews\" });\n      }\n\n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        studentId: student.id\n      });\n\n      const review = await storage.createReview(reviewData);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Review creation error:\", error);\n      res.status(400).json({ error: \"Failed to create review\" });\n    }\n  });\n\n  app.get(\"/api/reviews/coach/:coachId\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviewsByCoach(req.params.coachId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Get coach reviews error:\", error);\n      res.status(500).json({ error: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Object Storage Routes\n  \n  // Serve public assets\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Authentication middleware helper\n  const isAuthenticated = (req: any, res: any, next: any) => {\n    const userId = (req.session as any)?.userId;\n    if (!userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n    req.user = { id: userId };\n    next();\n  };\n\n  // Admin middleware helper\n  const isAdmin = async (req: any, res: any, next: any) => {\n    const userId = (req.session as any)?.userId;\n    if (!userId) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n    \n    const isAdminUser = await storage.isUserAdmin(userId);\n    if (!isAdminUser) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    req.user = { id: userId };\n    next();\n  };\n\n  // The endpoint for serving objects with proper public/private access control\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    // Get userId from session if available (but don't require authentication)\n    const userId = (req.session as any)?.userId;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(404); // Return 404 instead of 401 for better UX\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // The endpoint for getting the upload URL for an object entity\n  app.post(\"/api/objects/upload\", isAuthenticated, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Update coach profile image endpoint\n  app.put(\"/api/coaches/:id/profile-image\", isAuthenticated, async (req, res) => {\n    if (!req.body.imageURL) {\n      return res.status(400).json({ error: \"imageURL is required\" });\n    }\n\n    const userId = (req.session as any)?.userId;\n\n    try {\n      const coach = await storage.getCoach(req.params.id);\n      if (!coach || coach.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to update this coach profile\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.imageURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Profile images should be public\n        },\n      );\n\n      // Update the coach's image in the database\n      const updatedCoach = await storage.updateCoach(req.params.id, { image: objectPath });\n\n      res.status(200).json({\n        objectPath: objectPath,\n        coach: updatedCoach\n      });\n    } catch (error) {\n      console.error(\"Error setting profile image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update coach video endpoint\n  app.post(\"/api/coaches/:id/videos\", isAuthenticated, async (req, res) => {\n    const { title, description, duration, videoURL, thumbnailURL } = req.body;\n    \n    if (!title || !description || !duration || !videoURL) {\n      return res.status(400).json({ error: \"Title, description, duration, and videoURL are required\" });\n    }\n\n    const userId = (req.session as any)?.userId;\n\n    try {\n      const coach = await storage.getCoach(req.params.id);\n      if (!coach || coach.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to update this coach profile\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      \n      // Set ACL for video file\n      const videoObjectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        videoURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Instructional videos should be public\n        },\n      );\n\n      let thumbnailObjectPath = null;\n      if (thumbnailURL) {\n        thumbnailObjectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n          thumbnailURL,\n          {\n            owner: userId,\n            visibility: \"public\",\n          },\n        );\n      }\n\n      // Create the video in the database\n      const video = await storage.createCoachVideo(coach.id, {\n        title,\n        description,\n        duration,\n        videoUrl: videoObjectPath,\n        thumbnail: thumbnailObjectPath || videoObjectPath, // Use video as thumbnail if no thumbnail provided\n      });\n\n      res.status(201).json({\n        video,\n        videoObjectPath,\n        thumbnailObjectPath\n      });\n    } catch (error) {\n      console.error(\"Error adding coach video:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Normalize profile image URL and set ACL\n  app.post(\"/api/objects/normalize-profile-image\", isAuthenticated, async (req, res) => {\n    if (!req.body.imageURL) {\n      return res.status(400).json({ error: \"imageURL is required\" });\n    }\n\n    const userId = (req.session as any)?.userId;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.imageURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Profile images should be public\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error normalizing profile image:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Normalize video URL and set ACL\n  app.post(\"/api/objects/normalize-video\", isAuthenticated, async (req, res) => {\n    if (!req.body.videoURL) {\n      return res.status(400).json({ error: \"videoURL is required\" });\n    }\n\n    const userId = (req.session as any)?.userId;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.videoURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Instructional videos should be public\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error normalizing video:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Normalize thumbnail URL and set ACL\n  app.post(\"/api/objects/normalize-thumbnail\", isAuthenticated, async (req, res) => {\n    if (!req.body.thumbnailURL) {\n      return res.status(400).json({ error: \"thumbnailURL is required\" });\n    }\n\n    const userId = (req.session as any)?.userId;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.thumbnailURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Thumbnails should be public\n        },\n      );\n\n      res.status(200).json({\n        objectPath: objectPath,\n      });\n    } catch (error) {\n      console.error(\"Error normalizing thumbnail:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Google Calendar integration routes\n  \n  // Get Google Calendar authorization URL\n  app.get(\"/api/calendar/auth-url\", isAuthenticated, async (req, res) => {\n    try {\n      const { GoogleCalendarService } = await import(\"./googleCalendar\");\n      const calendarService = new GoogleCalendarService();\n      \n      // Generate state parameter for CSRF protection\n      const state = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      (req.session as any).calendarAuthState = state;\n      \n      const authUrl = calendarService.getAuthUrl(state);\n      \n      res.status(200).json({ authUrl });\n    } catch (error) {\n      console.error(\"Error generating auth URL:\", error);\n      res.status(500).json({ error: \"Failed to generate authorization URL\" });\n    }\n  });\n\n  // Handle Google Calendar authorization callback\n  app.post(\"/api/calendar/callback\", isAuthenticated, async (req, res) => {\n    const { code, coachId, state } = req.body;\n    \n    if (!code || !coachId || !state) {\n      return res.status(400).json({ error: \"Authorization code, coach ID, and state are required\" });\n    }\n\n    // Verify state parameter to prevent CSRF\n    const expectedState = (req.session as any)?.calendarAuthState;\n    if (!expectedState || state !== expectedState) {\n      return res.status(400).json({ error: \"Invalid state parameter\" });\n    }\n\n    const userId = (req.session as any)?.userId;\n\n    try {\n      // Verify the coach belongs to this user\n      const coach = await storage.getCoach(coachId);\n      if (!coach || coach.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to update this coach profile\" });\n      }\n\n      const { GoogleCalendarService } = await import(\"./googleCalendar\");\n      const calendarService = new GoogleCalendarService();\n      \n      // Exchange code for tokens\n      const { refreshToken } = await calendarService.exchangeCodeForTokens(code);\n      \n      // Set refresh token to get calendar ID\n      calendarService.setRefreshToken(refreshToken);\n      const calendarId = await calendarService.getPrimaryCalendarId();\n      \n      // Store calendar settings\n      await storage.updateCoachCalendarSettings(coachId, {\n        googleCalendarId: calendarId,\n        googleRefreshToken: refreshToken,\n        isEnabled: true,\n        lastSyncedAt: new Date(),\n      });\n\n      // Perform initial sync\n      const syncResult = await calendarService.syncExternalEvents(storage, coachId, calendarId);\n      \n      res.status(200).json({\n        message: \"Calendar integration successful\",\n        syncResult,\n      });\n    } catch (error) {\n      console.error(\"Error setting up calendar integration:\", error);\n      res.status(500).json({ error: \"Failed to setup calendar integration\" });\n    }\n  });\n\n  // Sync coach calendar manually\n  app.post(\"/api/calendar/sync/:coachId\", isAuthenticated, async (req, res) => {\n    const { coachId } = req.params;\n    const userId = (req.session as any)?.userId;\n\n    try {\n      // Verify the coach belongs to this user\n      const coach = await storage.getCoach(coachId);\n      if (!coach || coach.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to sync this coach's calendar\" });\n      }\n\n      // Get calendar settings\n      const calendarSettings = await storage.getCoachCalendarSettings(coachId);\n      if (!calendarSettings?.googleRefreshToken || !calendarSettings?.googleCalendarId) {\n        return res.status(400).json({ error: \"Calendar integration not set up\" });\n      }\n\n      const { GoogleCalendarService } = await import(\"./googleCalendar\");\n      const calendarService = new GoogleCalendarService();\n      calendarService.setRefreshToken(calendarSettings.googleRefreshToken);\n\n      // Perform sync\n      const syncResult = await calendarService.syncExternalEvents(\n        storage,\n        coachId,\n        calendarSettings.googleCalendarId,\n        calendarSettings.lastSyncToken\n      );\n\n      // Update last synced time and sync token\n      await storage.updateCoachCalendarSettings(coachId, {\n        lastSyncedAt: new Date(),\n        lastSyncToken: syncResult.lastSyncToken,\n      });\n\n      res.status(200).json({\n        message: \"Calendar sync completed\",\n        syncResult,\n      });\n    } catch (error) {\n      console.error(\"Error syncing calendar:\", error);\n      res.status(500).json({ error: \"Failed to sync calendar\" });\n    }\n  });\n\n  // Get coach availability and busy times\n  app.get(\"/api/coaches/:coachId/availability\", async (req, res) => {\n    const { coachId } = req.params;\n    const { startDate, endDate } = req.query;\n\n    try {\n      const coach = await storage.getCoach(coachId);\n      if (!coach) {\n        return res.status(404).json({ error: \"Coach not found\" });\n      }\n\n      // Get general availability\n      const availability = await storage.getCoachAvailability(coachId);\n\n      // Get busy times for date range\n      let busyTimes = [];\n      if (startDate && endDate) {\n        busyTimes = await storage.getCoachBusyTimes(\n          coachId,\n          new Date(startDate as string),\n          new Date(endDate as string)\n        );\n      }\n\n      res.status(200).json({\n        availability,\n        busyTimes,\n      });\n    } catch (error) {\n      console.error(\"Error fetching availability:\", error);\n      res.status(500).json({ error: \"Failed to fetch availability\" });\n    }\n  });\n\n  // Update coach availability\n  app.put(\"/api/coaches/:coachId/availability\", isAuthenticated, async (req, res) => {\n    const { coachId } = req.params;\n    const { availability } = req.body;\n    const userId = (req.session as any)?.userId;\n\n    if (!availability || !Array.isArray(availability)) {\n      return res.status(400).json({ error: \"Valid availability array is required\" });\n    }\n\n    try {\n      // Verify the coach belongs to this user\n      const coach = await storage.getCoach(coachId);\n      if (!coach || coach.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to update this coach's availability\" });\n      }\n\n      // Update availability\n      await storage.updateCoachAvailability(coachId, availability);\n\n      res.status(200).json({ message: \"Availability updated successfully\" });\n    } catch (error) {\n      console.error(\"Error updating availability:\", error);\n      res.status(500).json({ error: \"Failed to update availability\" });\n    }\n  });\n\n  // Disconnect Google Calendar\n  app.delete(\"/api/calendar/:coachId\", isAuthenticated, async (req, res) => {\n    const { coachId } = req.params;\n    const userId = (req.session as any)?.userId;\n\n    try {\n      // Verify the coach belongs to this user\n      const coach = await storage.getCoach(coachId);\n      if (!coach || coach.userId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to disconnect this coach's calendar\" });\n      }\n\n      // Disable calendar integration\n      await storage.updateCoachCalendarSettings(coachId, {\n        isEnabled: false,\n        googleRefreshToken: null,\n        googleCalendarId: null,\n      });\n\n      res.status(200).json({ message: \"Calendar disconnected successfully\" });\n    } catch (error) {\n      console.error(\"Error disconnecting calendar:\", error);\n      res.status(500).json({ error: \"Failed to disconnect calendar\" });\n    }\n  });\n\n  // Admin routes - protected by isAdmin middleware\n  \n  // Check if current user is admin\n  app.get(\"/api/admin/check\", isAuthenticated, async (req, res) => {\n    const userId = (req.session as any)?.userId;\n    const isAdminUser = await storage.isUserAdmin(userId);\n    res.status(200).json({ isAdmin: isAdminUser });\n  });\n\n  // Get all pending coaches for approval\n  app.get(\"/api/admin/pending-coaches\", isAdmin, async (req, res) => {\n    try {\n      const pendingCoaches = await storage.getPendingCoaches();\n      res.status(200).json(pendingCoaches);\n    } catch (error) {\n      console.error(\"Error fetching pending coaches:\", error);\n      res.status(500).json({ error: \"Failed to fetch pending coaches\" });\n    }\n  });\n\n  // Approve a coach\n  app.post(\"/api/admin/approve-coach/:coachId\", isAdmin, async (req, res) => {\n    const { coachId } = req.params;\n    const adminId = (req.session as any)?.userId;\n\n    try {\n      await storage.approveCoach(coachId, adminId);\n      res.status(200).json({ message: \"Coach approved successfully\" });\n    } catch (error) {\n      console.error(\"Error approving coach:\", error);\n      res.status(500).json({ error: \"Failed to approve coach\" });\n    }\n  });\n\n  // Reject a coach\n  app.post(\"/api/admin/reject-coach/:coachId\", isAdmin, async (req, res) => {\n    const { coachId } = req.params;\n    const adminId = (req.session as any)?.userId;\n\n    try {\n      await storage.rejectCoach(coachId, adminId);\n      res.status(200).json({ message: \"Coach rejected successfully\" });\n    } catch (error) {\n      console.error(\"Error rejecting coach:\", error);\n      res.status(500).json({ error: \"Failed to reject coach\" });\n    }\n  });\n\n  // Get all bookings/lessons\n  app.get(\"/api/admin/bookings\", isAdmin, async (req, res) => {\n    try {\n      const bookings = await storage.getAllBookings();\n      res.status(200).json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Get all coaches (approved, pending, rejected)\n  app.get(\"/api/admin/coaches\", isAdmin, async (req, res) => {\n    try {\n      const coaches = await storage.getAllCoaches();\n      res.status(200).json(coaches);\n    } catch (error) {\n      console.error(\"Error fetching coaches:\", error);\n      res.status(500).json({ error: \"Failed to fetch coaches\" });\n    }\n  });\n\n  // Get all students\n  app.get(\"/api/admin/students\", isAdmin, async (req, res) => {\n    try {\n      const students = await storage.getAllStudents();\n      res.status(200).json(students);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      res.status(500).json({ error: \"Failed to fetch students\" });\n    }\n  });\n\n  // Delete a coach\n  app.delete(\"/api/admin/coaches/:coachId\", isAdmin, async (req, res) => {\n    const { coachId } = req.params;\n    const adminId = (req.session as any)?.userId;\n\n    try {\n      await storage.deleteCoach(coachId, adminId);\n      res.status(200).json({ message: \"Coach deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting coach:\", error);\n      res.status(500).json({ error: \"Failed to delete coach\" });\n    }\n  });\n\n  // Delete a student\n  app.delete(\"/api/admin/students/:studentId\", isAdmin, async (req, res) => {\n    const { studentId } = req.params;\n    const adminId = (req.session as any)?.userId;\n\n    try {\n      await storage.deleteStudent(studentId, adminId);\n      res.status(200).json({ message: \"Student deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting student:\", error);\n      res.status(500).json({ error: \"Failed to delete student\" });\n    }\n  });\n\n  // Send coach signup link email\n  app.post(\"/api/admin/send-coach-signup\", isAdmin, async (req, res) => {\n    const { email, message } = req.body;\n    const adminId = (req.session as any)?.userId;\n\n    if (!email) {\n      return res.status(400).json({ error: \"Email is required\" });\n    }\n\n    try {\n      // Check if SendGrid integration exists\n      const { EmailService } = await import(\"./email.js\");\n      const emailService = new EmailService();\n      \n      const signupUrl = `${req.protocol}://${req.get('host')}/coach-registration`;\n      const customMessage = message || \"You've been invited to join our golf coaching platform as a PGA certified instructor.\";\n      \n      const emailBody = `\n        <h2>Golf Coach Platform Invitation</h2>\n        <p>${customMessage}</p>\n        <p>Click the link below to register as a coach:</p>\n        <p><a href=\"${signupUrl}\" style=\"background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;\">Register as Coach</a></p>\n        <p>Or copy and paste this URL: ${signupUrl}</p>\n        <p>Best regards,<br>The Golf Coach Team</p>\n      `;\n\n      await emailService.sendEmail(\n        email,\n        \"Invitation to Join Golf Coach Platform\",\n        emailBody\n      );\n\n      await storage.logAdminAction(adminId, 'send_signup_link', 'email', undefined, JSON.stringify({ email, message: customMessage }));\n      \n      res.status(200).json({ message: \"Coach signup email sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending signup email:\", error);\n      res.status(500).json({ error: \"Failed to send signup email\" });\n    }\n  });\n\n  // Get admin action logs\n  app.get(\"/api/admin/actions\", isAdmin, async (req, res) => {\n    const limit = parseInt(req.query.limit as string) || 50;\n    \n    try {\n      const actions = await storage.getAdminActions(limit);\n      res.status(200).json(actions);\n    } catch (error) {\n      console.error(\"Error fetching admin actions:\", error);\n      res.status(500).json({ error: \"Failed to fetch admin actions\" });\n    }\n  });\n\n  // Profile Routes\n  app.get(\"/api/students/profile/:userId\", isAuthenticated, async (req, res) => {\n    try {\n      const requestedUserId = req.params.userId;\n      const currentUserId = (req.session as any)?.userId;\n      \n      // Users can only access their own profile or admins can access any\n      const user = await storage.getUser(currentUserId);\n      if (currentUserId !== requestedUserId && user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Not authorized to access this profile\" });\n      }\n      \n      const student = await storage.getStudentByUserId(requestedUserId);\n      if (!student) {\n        return res.status(404).json({ error: \"Student profile not found\" });\n      }\n      \n      res.json({ student });\n    } catch (error) {\n      console.error(\"Error fetching student profile:\", error);\n      res.status(500).json({ error: \"Failed to fetch student profile\" });\n    }\n  });\n\n  app.get(\"/api/coaches/profile/:userId\", isAuthenticated, async (req, res) => {\n    try {\n      const requestedUserId = req.params.userId;\n      const currentUserId = (req.session as any)?.userId;\n      \n      // Users can only access their own profile or admins can access any\n      const user = await storage.getUser(currentUserId);\n      if (currentUserId !== requestedUserId && user?.role !== 'admin') {\n        return res.status(403).json({ error: \"Not authorized to access this profile\" });\n      }\n      \n      // Find coach by user ID\n      const coaches = await db.select().from(coaches).where(eq(coaches.userId, requestedUserId));\n      const coach = coaches[0];\n      \n      if (!coach) {\n        return res.status(404).json({ error: \"Coach profile not found\" });\n      }\n      \n      res.json({ coach });\n    } catch (error) {\n      console.error(\"Error fetching coach profile:\", error);\n      res.status(500).json({ error: \"Failed to fetch coach profile\" });\n    }\n  });\n\n  app.get(\"/api/bookings/my-bookings\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"User not found\" });\n      }\n      \n      let bookings = [];\n      \n      if (user.role === 'student') {\n        const student = await storage.getStudentByUserId(userId);\n        if (student) {\n          bookings = await storage.getBookingsByStudent(student.id);\n        }\n      } else if (user.role === 'coach') {\n        const coachList = await db.select().from(coaches).where(eq(coaches.userId, userId));\n        const coach = coachList[0];\n        if (coach) {\n          bookings = await storage.getBookingsByCoach(coach.id);\n        }\n      }\n      \n      // Get coach/student names for each booking\n      const enrichedBookings = await Promise.all(bookings.map(async (booking) => {\n        const coach = await storage.getCoach(booking.coachId);\n        const student = await storage.getStudent(booking.studentId);\n        \n        return {\n          ...booking,\n          coach: coach ? { name: coach.name, image: coach.image } : null,\n          student: student ? { name: student.name } : null,\n        };\n      }));\n      \n      res.json({ bookings: enrichedBookings });\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ error: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Messaging Routes\n  app.get(\"/api/messages/unread-count\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const count = await storage.getUnreadMessagesCount(userId);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread messages count:\", error);\n      res.status(500).json({ error: \"Failed to fetch unread messages count\" });\n    }\n  });\n\n  app.get(\"/api/messages/conversations\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const conversations = await storage.getConversations(userId);\n      res.json({ conversations });\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get(\"/api/messages/conversation/:otherUserId\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const otherUserId = req.params.otherUserId;\n      const messages = await storage.getMessagesWithUser(userId, otherUserId);\n      res.json({ messages });\n    } catch (error) {\n      console.error(\"Error fetching conversation:\", error);\n      res.status(500).json({ error: \"Failed to fetch conversation\" });\n    }\n  });\n\n  app.post(\"/api/messages/mark-read/:senderId\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req.session as any)?.userId;\n      const senderId = req.params.senderId;\n      await storage.markMessagesAsRead(userId, senderId);\n      res.json({ message: \"Messages marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking messages as read:\", error);\n      res.status(500).json({ error: \"Failed to mark messages as read\" });\n    }\n  });\n\n  app.post(\"/api/messages/send\", isAuthenticated, async (req, res) => {\n    try {\n      const senderId = (req.session as any)?.userId;\n      const { receiverId, content, bookingId } = req.body;\n      \n      if (!receiverId || !content?.trim()) {\n        return res.status(400).json({ error: \"Receiver ID and message content are required\" });\n      }\n      \n      // Verify receiver exists\n      const receiver = await storage.getUser(receiverId);\n      if (!receiver) {\n        return res.status(404).json({ error: \"Receiver not found\" });\n      }\n      \n      const message = await storage.sendMessage({\n        senderId,\n        receiverId,\n        content: content.trim(),\n        bookingId: bookingId || null,\n      });\n      \n      res.json({ message });\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":42498},"server/storage.ts":{"content":"// javascript_database integration - from blueprint:javascript_database\nimport { \n  users, coaches, students, bookings, reviews, \n  coachSpecialties, coachTools, coachCertifications, coachVideos,\n  coachCalendarSettings, coachBusyTimes, coachAvailability, adminActions, messages,\n  type User, type InsertUser, type Coach, type Student, \n  type InsertCoach, type InsertStudent, type Booking, type InsertBooking,\n  type Review, type InsertReview, type Message, type InsertMessage\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, like, and, desc, sql, type SQL } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\n// Interface for user creation with plain password (for internal use)\ninterface CreateUserData {\n  email: string;\n  password: string;\n  role?: string;\n}\n\n// CRUD methods for the golf coach platform\nexport interface IStorage {\n  // User authentication\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: CreateUserData): Promise<User>;\n  verifyPassword(email: string, password: string): Promise<User | null>;\n  \n  // Coach management\n  getCoach(id: string): Promise<Coach | undefined>;\n  getCoachWithDetails(id: string): Promise<any>;\n  createCoach(coach: InsertCoach): Promise<Coach>;\n  updateCoach(id: string, coach: Partial<InsertCoach>): Promise<Coach>;\n  updateCoachGoogleReviews(id: string, reviews: {\n    googleRating?: string;\n    googleReviewCount?: number;\n    lastGoogleSync?: Date;\n  }): Promise<void>;\n  searchCoaches(params: {\n    location?: string;\n    specialties?: string[];\n    priceRange?: { min: number; max: number };\n    rating?: number;\n    tools?: string[];\n  }): Promise<any[]>;\n  \n  // Student management\n  getStudent(id: string): Promise<Student | undefined>;\n  getStudentByUserId(userId: string): Promise<Student | undefined>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, student: Partial<InsertStudent>): Promise<Student>;\n  \n  // Booking management\n  getBooking(id: string): Promise<Booking | undefined>;\n  getBookingsByStudent(studentId: string): Promise<Booking[]>;\n  getBookingsByCoach(coachId: string): Promise<Booking[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: string, updates: Partial<Booking>): Promise<Booking>;\n  \n  // Review management\n  createReview(review: InsertReview): Promise<Review>;\n  getReviewsByCoach(coachId: string): Promise<Review[]>;\n  \n  // Coach specialties, tools, certifications, and videos\n  createCoachSpecialty(coachId: string, specialty: string): Promise<void>;\n  createCoachTool(coachId: string, tool: string): Promise<void>;\n  createCoachCertification(coachId: string, certification: string): Promise<void>;\n  createCoachVideo(coachId: string, video: { title: string; description: string; thumbnail: string; duration: string; videoUrl?: string }): Promise<void>;\n  \n  // Calendar and availability management\n  getCoachCalendarSettings(coachId: string): Promise<any>;\n  updateCoachCalendarSettings(coachId: string, settings: {\n    googleCalendarId?: string | null;\n    googleRefreshToken?: string | null;\n    isEnabled?: boolean;\n    lastSyncedAt?: Date;\n    lastSyncToken?: string;\n  }): Promise<void>;\n  updateCoachBusyTime(busyTime: {\n    coachId: string;\n    startDateTime: Date;\n    endDateTime: Date;\n    source: string;\n    externalEventId: string | null;\n    title?: string;\n  }): Promise<void>;\n  removeCoachBusyTime(coachId: string, externalEventId: string): Promise<void>;\n  getCoachBusyTimes(coachId: string, startDate?: Date, endDate?: Date): Promise<any[]>;\n  getCoachAvailability(coachId: string): Promise<any[]>;\n  updateCoachAvailability(coachId: string, availability: {\n    dayOfWeek: number;\n    startTime: string;\n    endTime: string;\n    isAvailable: boolean;\n  }[]): Promise<void>;\n  \n  // Admin functionality\n  isUserAdmin(userId: string): Promise<boolean>;\n  getPendingCoaches(): Promise<any[]>;\n  approveCoach(coachId: string, adminId: string): Promise<void>;\n  rejectCoach(coachId: string, adminId: string): Promise<void>;\n  getAllBookings(): Promise<any[]>;\n  deleteCoach(coachId: string, adminId: string): Promise<void>;\n  deleteStudent(studentId: string, adminId: string): Promise<void>;\n  deleteUser(userId: string, adminId: string): Promise<void>;\n  logAdminAction(adminId: string, action: string, targetType: string, targetId?: string, details?: string): Promise<void>;\n  getAdminActions(limit?: number): Promise<any[]>;\n\n  // Messaging functionality\n  sendMessage(message: InsertMessage): Promise<Message>;\n  getConversations(userId: string): Promise<any[]>;\n  getMessagesWithUser(userId1: string, userId2: string): Promise<Message[]>;\n  markMessagesAsRead(userId: string, senderId: string): Promise<void>;\n  getUnreadMessagesCount(userId: string): Promise<number>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(userData: CreateUserData): Promise<User> {\n    // Hash the password before storing\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(userData.password, saltRounds);\n    \n    // Create the user data for insertion\n    const userToInsert = {\n      email: userData.email,\n      passwordHash: hashedPassword,\n      role: userData.role || \"student\",\n    };\n    \n    const [user] = await db\n      .insert(users)\n      .values(userToInsert)\n      .returning();\n    return user;\n  }\n\n  async verifyPassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) {\n      return null;\n    }\n    \n    const isPasswordValid = await bcrypt.compare(password, user.passwordHash);\n    return isPasswordValid ? user : null;\n  }\n\n  // Coach methods\n  async getCoach(id: string): Promise<Coach | undefined> {\n    const [coach] = await db.select().from(coaches).where(eq(coaches.id, id));\n    return coach || undefined;\n  }\n\n  async getCoachWithDetails(id: string): Promise<any> {\n    const coach = await db.query.coaches.findFirst({\n      where: eq(coaches.id, id),\n      with: {\n        specialties: true,\n        tools: true,\n        certifications: true,\n        videos: true,\n        reviews: {\n          with: {\n            student: true,\n          },\n        },\n      },\n    });\n    return coach;\n  }\n\n  async createCoach(insertCoach: InsertCoach): Promise<Coach> {\n    const [coach] = await db\n      .insert(coaches)\n      .values(insertCoach)\n      .returning();\n    return coach;\n  }\n\n  async updateCoach(id: string, updates: Partial<InsertCoach>): Promise<Coach> {\n    const [coach] = await db\n      .update(coaches)\n      .set(updates)\n      .where(eq(coaches.id, id))\n      .returning();\n    return coach;\n  }\n\n  async updateCoachGoogleReviews(id: string, reviews: {\n    googleRating?: string;\n    googleReviewCount?: number;\n    lastGoogleSync?: Date;\n  }): Promise<void> {\n    await db\n      .update(coaches)\n      .set(reviews)\n      .where(eq(coaches.id, id));\n  }\n\n  async searchCoaches(params: {\n    location?: string;\n    specialties?: string[];\n    priceRange?: { min: number; max: number };\n    rating?: number;\n    tools?: string[];\n  }): Promise<any[]> {\n    const conditions = [\n      eq(coaches.approvalStatus, 'approved') // Only show approved coaches\n    ];\n    \n    if (params.location) {\n      conditions.push(like(coaches.location, `%${params.location}%`));\n    }\n    \n    if (params.priceRange) {\n      conditions.push(sql`${coaches.pricePerHour} >= ${params.priceRange.min}`);\n      conditions.push(sql`${coaches.pricePerHour} <= ${params.priceRange.max}`);\n    }\n    \n    if (params.rating) {\n      conditions.push(sql`${coaches.rating} >= ${params.rating}`);\n    }\n\n    const coachResults = await db.query.coaches.findMany({\n      where: and(...conditions),\n      with: {\n        specialties: true,\n        tools: true,\n        certifications: true,\n        videos: true,\n      },\n      orderBy: [desc(coaches.rating)],\n    });\n\n    return coachResults;\n  }\n\n  // Student methods\n  async getStudent(id: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.id, id));\n    return student || undefined;\n  }\n\n  async getStudentByUserId(userId: string): Promise<Student | undefined> {\n    const [student] = await db.select().from(students).where(eq(students.userId, userId));\n    return student || undefined;\n  }\n\n  async createStudent(insertStudent: InsertStudent): Promise<Student> {\n    const [student] = await db\n      .insert(students)\n      .values(insertStudent)\n      .returning();\n    return student;\n  }\n\n  async updateStudent(id: string, updates: Partial<InsertStudent>): Promise<Student> {\n    const [student] = await db\n      .update(students)\n      .set(updates)\n      .where(eq(students.id, id))\n      .returning();\n    return student;\n  }\n\n  // Booking methods\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking || undefined;\n  }\n\n  async getBookingsByStudent(studentId: string): Promise<Booking[]> {\n    return await db.select().from(bookings)\n      .where(eq(bookings.studentId, studentId))\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async getBookingsByCoach(coachId: string): Promise<Booking[]> {\n    return await db.select().from(bookings)\n      .where(eq(bookings.coachId, coachId))\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const [booking] = await db\n      .insert(bookings)\n      .values(insertBooking)\n      .returning();\n    return booking;\n  }\n\n  async updateBooking(id: string, updates: Partial<Booking>): Promise<Booking> {\n    const [booking] = await db\n      .update(bookings)\n      .set(updates)\n      .where(eq(bookings.id, id))\n      .returning();\n    return booking;\n  }\n\n  // Review methods\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const [review] = await db\n      .insert(reviews)\n      .values(insertReview)\n      .returning();\n    \n    // Update coach's rating and review count\n    const coachReviews = await this.getReviewsByCoach(insertReview.coachId);\n    const averageRating = coachReviews.reduce((sum, r) => sum + r.rating, 0) / coachReviews.length;\n    \n    await db\n      .update(coaches)\n      .set({\n        rating: averageRating.toFixed(2),\n        reviewCount: coachReviews.length,\n      })\n      .where(eq(coaches.id, insertReview.coachId));\n    \n    return review;\n  }\n\n  async getReviewsByCoach(coachId: string): Promise<Review[]> {\n    return await db.select().from(reviews)\n      .where(eq(reviews.coachId, coachId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  // Coach specialties, tools, certifications, and videos methods\n  async createCoachSpecialty(coachId: string, specialty: string): Promise<void> {\n    await db.insert(coachSpecialties).values({\n      coachId,\n      specialty,\n    });\n  }\n\n  async createCoachTool(coachId: string, tool: string): Promise<void> {\n    await db.insert(coachTools).values({\n      coachId,\n      tool,\n    });\n  }\n\n  async createCoachCertification(coachId: string, certification: string): Promise<void> {\n    await db.insert(coachCertifications).values({\n      coachId,\n      certification,\n    });\n  }\n\n  async createCoachVideo(coachId: string, video: { title: string; description: string; thumbnail: string; duration: string; videoUrl?: string }): Promise<void> {\n    await db.insert(coachVideos).values({\n      coachId,\n      title: video.title,\n      description: video.description,\n      thumbnail: video.thumbnail,\n      duration: video.duration,\n      videoUrl: video.videoUrl || null,\n    });\n  }\n\n  // Calendar and availability methods\n  async getCoachCalendarSettings(coachId: string): Promise<any> {\n    const [settings] = await db.select().from(coachCalendarSettings).where(eq(coachCalendarSettings.coachId, coachId));\n    return settings || null;\n  }\n\n  async updateCoachCalendarSettings(coachId: string, settings: {\n    googleCalendarId?: string | null;\n    googleRefreshToken?: string | null;\n    isEnabled?: boolean;\n    lastSyncedAt?: Date;\n    lastSyncToken?: string;\n  }): Promise<void> {\n    const existingSettings = await this.getCoachCalendarSettings(coachId);\n    \n    if (existingSettings) {\n      await db.update(coachCalendarSettings)\n        .set(settings)\n        .where(eq(coachCalendarSettings.coachId, coachId));\n    } else {\n      await db.insert(coachCalendarSettings).values({\n        coachId,\n        ...settings,\n      });\n    }\n  }\n\n  async updateCoachBusyTime(busyTime: {\n    coachId: string;\n    startDateTime: Date;\n    endDateTime: Date;\n    source: string;\n    externalEventId: string | null;\n    title?: string;\n  }): Promise<void> {\n    // Check if busy time already exists for this external event\n    if (busyTime.externalEventId) {\n      const [existingBusyTime] = await db.select()\n        .from(coachBusyTimes)\n        .where(and(\n          eq(coachBusyTimes.coachId, busyTime.coachId),\n          eq(coachBusyTimes.externalEventId, busyTime.externalEventId)\n        ));\n      \n      if (existingBusyTime) {\n        // Update existing busy time\n        await db.update(coachBusyTimes)\n          .set({\n            startDateTime: busyTime.startDateTime,\n            endDateTime: busyTime.endDateTime,\n            title: busyTime.title || 'Busy',\n          })\n          .where(eq(coachBusyTimes.id, existingBusyTime.id));\n        return;\n      }\n    }\n    \n    // Insert new busy time\n    await db.insert(coachBusyTimes).values({\n      coachId: busyTime.coachId,\n      startDateTime: busyTime.startDateTime,\n      endDateTime: busyTime.endDateTime,\n      source: busyTime.source,\n      externalEventId: busyTime.externalEventId,\n      title: busyTime.title || 'Busy',\n    });\n  }\n\n  async removeCoachBusyTime(coachId: string, externalEventId: string): Promise<void> {\n    await db.delete(coachBusyTimes)\n      .where(and(\n        eq(coachBusyTimes.coachId, coachId),\n        eq(coachBusyTimes.externalEventId, externalEventId)\n      ));\n  }\n\n  async getCoachBusyTimes(coachId: string, startDate?: Date, endDate?: Date): Promise<any[]> {\n    let query = db.select().from(coachBusyTimes).where(eq(coachBusyTimes.coachId, coachId));\n    \n    if (startDate && endDate) {\n      query = db.select().from(coachBusyTimes).where(and(\n        eq(coachBusyTimes.coachId, coachId),\n        sql`${coachBusyTimes.startDateTime} >= ${startDate}`,\n        sql`${coachBusyTimes.endDateTime} <= ${endDate}`\n      ));\n    }\n    \n    return await query.orderBy(coachBusyTimes.startDateTime);\n  }\n\n  async getCoachAvailability(coachId: string): Promise<any[]> {\n    return await db.select().from(coachAvailability)\n      .where(eq(coachAvailability.coachId, coachId))\n      .orderBy(coachAvailability.dayOfWeek);\n  }\n\n  async updateCoachAvailability(coachId: string, availability: {\n    dayOfWeek: number;\n    startTime: string;\n    endTime: string;\n    isAvailable: boolean;\n  }[]): Promise<void> {\n    // Delete existing availability\n    await db.delete(coachAvailability).where(eq(coachAvailability.coachId, coachId));\n    \n    // Insert new availability\n    if (availability.length > 0) {\n      await db.insert(coachAvailability).values(\n        availability.map(avail => ({\n          coachId,\n          dayOfWeek: avail.dayOfWeek,\n          startTime: avail.startTime,\n          endTime: avail.endTime,\n          isAvailable: avail.isAvailable,\n        }))\n      );\n    }\n  }\n\n  // Admin functionality\n  async isUserAdmin(userId: string): Promise<boolean> {\n    const user = await db.select().from(users)\n      .where(eq(users.id, userId))\n      .limit(1);\n    \n    return user.length > 0 && user[0].role === 'admin';\n  }\n\n  async getPendingCoaches(): Promise<any[]> {\n    return await db.select({\n      id: coaches.id,\n      name: coaches.name,\n      email: users.email,\n      bio: coaches.bio,\n      location: coaches.location,\n      pricePerHour: coaches.pricePerHour,\n      yearsExperience: coaches.yearsExperience,\n      image: coaches.image,\n      createdAt: coaches.createdAt,\n      approvalStatus: coaches.approvalStatus,\n    })\n    .from(coaches)\n    .innerJoin(users, eq(coaches.userId, users.id))\n    .where(eq(coaches.approvalStatus, 'pending'))\n    .orderBy(desc(coaches.createdAt));\n  }\n\n  async getAllCoaches(): Promise<any[]> {\n    return await db.select({\n      id: coaches.id,\n      name: coaches.name,\n      email: users.email,\n      bio: coaches.bio,\n      location: coaches.location,\n      pricePerHour: coaches.pricePerHour,\n      yearsExperience: coaches.yearsExperience,\n      image: coaches.image,\n      createdAt: coaches.createdAt,\n      approvalStatus: coaches.approvalStatus,\n      userId: coaches.userId,\n    })\n    .from(coaches)\n    .innerJoin(users, eq(coaches.userId, users.id))\n    .orderBy(desc(coaches.createdAt));\n  }\n\n  async getAllStudents(): Promise<any[]> {\n    return await db.select({\n      id: students.id,\n      name: students.name,\n      email: users.email,\n      phone: students.phone,\n      skillLevel: students.skillLevel,\n      createdAt: students.createdAt,\n      userId: students.userId,\n    })\n    .from(students)\n    .innerJoin(users, eq(students.userId, users.id))\n    .orderBy(desc(students.createdAt));\n  }\n\n  async approveCoach(coachId: string, adminId: string): Promise<void> {\n    await db.update(coaches)\n      .set({\n        approvalStatus: 'approved',\n        approvedAt: new Date(),\n        approvedBy: adminId,\n      })\n      .where(eq(coaches.id, coachId));\n    \n    await this.logAdminAction(adminId, 'approve_coach', 'coach', coachId);\n  }\n\n  async rejectCoach(coachId: string, adminId: string): Promise<void> {\n    await db.update(coaches)\n      .set({\n        approvalStatus: 'rejected',\n        approvedAt: new Date(),\n        approvedBy: adminId,\n      })\n      .where(eq(coaches.id, coachId));\n    \n    await this.logAdminAction(adminId, 'reject_coach', 'coach', coachId);\n  }\n\n  async getAllBookings(): Promise<any[]> {\n    return await db.select({\n      id: bookings.id,\n      studentName: students.name,\n      studentEmail: users.email,\n      coachName: coaches.name,\n      date: bookings.date,\n      time: bookings.time,\n      status: bookings.status,\n      totalAmount: bookings.totalAmount,\n      createdAt: bookings.createdAt,\n    })\n    .from(bookings)\n    .innerJoin(students, eq(bookings.studentId, students.id))\n    .innerJoin(coaches, eq(bookings.coachId, coaches.id))\n    .innerJoin(users, eq(students.userId, users.id))\n    .orderBy(desc(bookings.createdAt));\n  }\n\n  async deleteCoach(coachId: string, adminId: string): Promise<void> {\n    // Get coach details first for logging\n    const coach = await this.getCoach(coachId);\n    if (!coach) throw new Error('Coach not found');\n\n    // Delete coach (cascade will handle related records)\n    await db.delete(coaches).where(eq(coaches.id, coachId));\n    \n    await this.logAdminAction(adminId, 'delete_coach', 'coach', coachId, JSON.stringify({ name: coach.name }));\n  }\n\n  async deleteStudent(studentId: string, adminId: string): Promise<void> {\n    // Get student details first for logging\n    const student = await this.getStudent(studentId);\n    if (!student) throw new Error('Student not found');\n\n    // Delete student (cascade will handle related records)\n    await db.delete(students).where(eq(students.id, studentId));\n    \n    await this.logAdminAction(adminId, 'delete_student', 'student', studentId, JSON.stringify({ name: student.name }));\n  }\n\n  async deleteUser(userId: string, adminId: string): Promise<void> {\n    // Get user details first for logging\n    const user = await this.getUser(userId);\n    if (!user) throw new Error('User not found');\n\n    // Delete user (cascade will handle related records)\n    await db.delete(users).where(eq(users.id, userId));\n    \n    await this.logAdminAction(adminId, 'delete_user', 'user', userId, JSON.stringify({ email: user.email, role: user.role }));\n  }\n\n  async logAdminAction(adminId: string, action: string, targetType: string, targetId?: string, details?: string): Promise<void> {\n    await db.insert(adminActions).values({\n      adminId,\n      action,\n      targetType,\n      targetId: targetId || null,\n      details: details || null,\n    });\n  }\n\n  async getAdminActions(limit: number = 50): Promise<any[]> {\n    return await db.select({\n      id: adminActions.id,\n      adminEmail: users.email,\n      action: adminActions.action,\n      targetType: adminActions.targetType,\n      targetId: adminActions.targetId,\n      details: adminActions.details,\n      createdAt: adminActions.createdAt,\n    })\n    .from(adminActions)\n    .innerJoin(users, eq(adminActions.adminId, users.id))\n    .orderBy(desc(adminActions.createdAt))\n    .limit(limit);\n  }\n\n  // Messaging methods\n  async sendMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    return newMessage;\n  }\n\n  async getConversations(userId: string): Promise<any[]> {\n    // Get all unique users this user has had conversations with\n    const conversationsQuery = await db.select({\n      userId: sql<string>`CASE \n        WHEN ${messages.senderId} = ${userId} THEN ${messages.receiverId} \n        ELSE ${messages.senderId} \n      END`.as('userId'),\n      userName: sql<string>`CASE \n        WHEN ${messages.senderId} = ${userId} THEN receiver_users.email \n        ELSE sender_users.email \n      END`.as('userName'),\n      lastMessage: sql<string>`\n        (SELECT content FROM ${messages} m2 \n         WHERE (m2.senderId = ${userId} AND m2.receiverId = CASE WHEN ${messages.senderId} = ${userId} THEN ${messages.receiverId} ELSE ${messages.senderId} END) \n            OR (m2.receiverId = ${userId} AND m2.senderId = CASE WHEN ${messages.senderId} = ${userId} THEN ${messages.receiverId} ELSE ${messages.senderId} END)\n         ORDER BY m2.createdAt DESC LIMIT 1)\n      `.as('lastMessage'),\n      lastMessageTime: sql<string>`\n        (SELECT createdAt FROM ${messages} m2 \n         WHERE (m2.senderId = ${userId} AND m2.receiverId = CASE WHEN ${messages.senderId} = ${userId} THEN ${messages.receiverId} ELSE ${messages.senderId} END) \n            OR (m2.receiverId = ${userId} AND m2.senderId = CASE WHEN ${messages.senderId} = ${userId} THEN ${messages.receiverId} ELSE ${messages.senderId} END)\n         ORDER BY m2.createdAt DESC LIMIT 1)\n      `.as('lastMessageTime'),\n      unreadCount: sql<number>`\n        (SELECT COUNT(*) FROM ${messages} m3 \n         WHERE m3.receiverId = ${userId} \n           AND m3.senderId = CASE WHEN ${messages.senderId} = ${userId} THEN ${messages.receiverId} ELSE ${messages.senderId} END\n           AND m3.isRead = false)\n      `.as('unreadCount'),\n    })\n    .from(messages)\n    .innerJoin(users, eq(messages.senderId, users.id))\n    .innerJoin(users, eq(messages.receiverId, users.id))\n    .where(sql`${messages.senderId} = ${userId} OR ${messages.receiverId} = ${userId}`)\n    .groupBy(sql`CASE WHEN ${messages.senderId} = ${userId} THEN ${messages.receiverId} ELSE ${messages.senderId} END`)\n    .orderBy(desc(sql`lastMessageTime`));\n\n    return conversationsQuery;\n  }\n\n  async getMessagesWithUser(userId1: string, userId2: string): Promise<Message[]> {\n    return await db.select()\n      .from(messages)\n      .where(\n        sql`(${messages.senderId} = ${userId1} AND ${messages.receiverId} = ${userId2}) \n            OR (${messages.senderId} = ${userId2} AND ${messages.receiverId} = ${userId1})`\n      )\n      .orderBy(messages.createdAt);\n  }\n\n  async markMessagesAsRead(userId: string, senderId: string): Promise<void> {\n    await db.update(messages)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(messages.receiverId, userId),\n          eq(messages.senderId, senderId)\n        )\n      );\n  }\n\n  async getUnreadMessagesCount(userId: string): Promise<number> {\n    const result = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(messages)\n      .where(\n        and(\n          eq(messages.receiverId, userId),\n          eq(messages.isRead, false)\n        )\n      );\n    \n    return result[0]?.count || 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":24573},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Base users table for authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  role: text(\"role\").notNull().default(\"student\"), // \"student\", \"coach\", or \"admin\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Students table for customer profiles\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  skillLevel: text(\"skill_level\"), // beginner, intermediate, advanced\n  preferences: text(\"preferences\"), // JSON string for lesson preferences\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Coaches table for instructor profiles\nexport const coaches = pgTable(\"coaches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().unique().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  bio: text(\"bio\").notNull(),\n  location: text(\"location\").notNull(),\n  pricePerHour: decimal(\"price_per_hour\", { precision: 10, scale: 2 }).notNull(),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  reviewCount: integer(\"review_count\").default(0),\n  responseTime: text(\"response_time\").default(\"24 hours\"),\n  availability: text(\"availability\").default(\"Available\"),\n  yearsExperience: integer(\"years_experience\").notNull(),\n  pgaCertificationId: text(\"pga_certification_id\").notNull(), // PGA certification number or ID\n  image: text(\"image\"), // URL to profile image\n  isVerified: boolean(\"is_verified\").default(false),\n  approvalStatus: text(\"approval_status\").notNull().default(\"pending\"), // \"pending\", \"approved\", \"rejected\"\n  approvedAt: timestamp(\"approved_at\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  googleReviewsUrl: text(\"google_reviews_url\"), // Google Business/Maps reviews URL\n  googleRating: decimal(\"google_rating\", { precision: 3, scale: 2 }),\n  googleReviewCount: integer(\"google_review_count\").default(0),\n  lastGoogleSync: timestamp(\"last_google_sync\"), // When Google Reviews were last synced\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Coach specialties\nexport const coachSpecialties = pgTable(\"coach_specialties\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  specialty: text(\"specialty\").notNull(),\n});\n\n// Coach tools and equipment\nexport const coachTools = pgTable(\"coach_tools\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  tool: text(\"tool\").notNull(),\n});\n\n// Coach certifications\nexport const coachCertifications = pgTable(\"coach_certifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  certification: text(\"certification\").notNull(),\n});\n\n// Coach instructional videos\nexport const coachVideos = pgTable(\"coach_videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  thumbnail: text(\"thumbnail\").notNull(),\n  duration: text(\"duration\").notNull(),\n  videoUrl: text(\"video_url\"), // URL to actual video file\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Lesson bookings\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id, { onDelete: \"cascade\" }),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  date: timestamp(\"date\").notNull(),\n  time: text(\"time\").notNull(),\n  duration: integer(\"duration\").notNull().default(60), // minutes\n  lessonType: text(\"lesson_type\").notNull(), // individual, group\n  location: text(\"location\").notNull(),\n  notes: text(\"notes\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, completed, cancelled\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, failed\n  paymentIntentId: text(\"payment_intent_id\"), // Stripe payment intent ID\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Reviews and ratings\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingId: varchar(\"booking_id\").notNull().unique().references(() => bookings.id, { onDelete: \"cascade\" }),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id, { onDelete: \"cascade\" }),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Coach availability and calendar integration\nexport const coachAvailability = pgTable(\"coach_availability\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0 = Sunday, 1 = Monday, etc.\n  startTime: text(\"start_time\").notNull(), // Format: \"09:00\"\n  endTime: text(\"end_time\").notNull(), // Format: \"17:00\"\n  isAvailable: boolean(\"is_available\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Coach calendar integration settings\nexport const coachCalendarSettings = pgTable(\"coach_calendar_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coachId: varchar(\"coach_id\").notNull().unique().references(() => coaches.id, { onDelete: \"cascade\" }),\n  googleCalendarId: text(\"google_calendar_id\"), // Google Calendar ID for sync\n  googleRefreshToken: text(\"google_refresh_token\"), // For API access\n  isEnabled: boolean(\"is_enabled\").default(false),\n  lastSyncedAt: timestamp(\"last_synced_at\"),\n  lastSyncToken: text(\"last_sync_token\"), // Token for incremental sync\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Time blocks to represent busy periods from external calendars\nexport const coachBusyTimes = pgTable(\"coach_busy_times\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  coachId: varchar(\"coach_id\").notNull().references(() => coaches.id, { onDelete: \"cascade\" }),\n  startDateTime: timestamp(\"start_date_time\").notNull(),\n  endDateTime: timestamp(\"end_date_time\").notNull(),\n  source: text(\"source\").notNull().default(\"google_calendar\"), // \"google_calendar\", \"manual\", \"booking\"\n  externalEventId: text(\"external_event_id\"), // ID from external calendar\n  title: text(\"title\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin actions log for tracking admin activities\nexport const adminActions = pgTable(\"admin_actions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").notNull().references(() => users.id),\n  action: text(\"action\").notNull(), // \"approve_coach\", \"reject_coach\", \"delete_coach\", \"delete_student\", \"send_signup_link\"\n  targetType: text(\"target_type\").notNull(), // \"coach\", \"student\", \"user\"\n  targetId: varchar(\"target_id\"), // ID of the affected entity\n  details: text(\"details\"), // JSON string with additional details\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Messages between coaches and students\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  receiverId: varchar(\"receiver_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id, { onDelete: \"cascade\" }), // Optional - messages can be tied to specific bookings\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Define relationships\nexport const usersRelations = relations(users, ({ one }) => ({\n  student: one(students, { fields: [users.id], references: [students.userId] }),\n  coach: one(coaches, { fields: [users.id], references: [coaches.userId] }),\n}));\n\nexport const studentsRelations = relations(students, ({ one, many }) => ({\n  user: one(users, { fields: [students.userId], references: [users.id] }),\n  bookings: many(bookings),\n  reviews: many(reviews),\n}));\n\nexport const coachesRelations = relations(coaches, ({ one, many }) => ({\n  user: one(users, { fields: [coaches.userId], references: [users.id] }),\n  specialties: many(coachSpecialties),\n  tools: many(coachTools),\n  certifications: many(coachCertifications),\n  videos: many(coachVideos),\n  bookings: many(bookings),\n  reviews: many(reviews),\n  availability: many(coachAvailability),\n  calendarSettings: one(coachCalendarSettings, { fields: [coaches.id], references: [coachCalendarSettings.coachId] }),\n  busyTimes: many(coachBusyTimes),\n}));\n\nexport const coachSpecialtiesRelations = relations(coachSpecialties, ({ one }) => ({\n  coach: one(coaches, { fields: [coachSpecialties.coachId], references: [coaches.id] }),\n}));\n\nexport const coachToolsRelations = relations(coachTools, ({ one }) => ({\n  coach: one(coaches, { fields: [coachTools.coachId], references: [coaches.id] }),\n}));\n\nexport const coachCertificationsRelations = relations(coachCertifications, ({ one }) => ({\n  coach: one(coaches, { fields: [coachCertifications.coachId], references: [coaches.id] }),\n}));\n\nexport const coachVideosRelations = relations(coachVideos, ({ one }) => ({\n  coach: one(coaches, { fields: [coachVideos.coachId], references: [coaches.id] }),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  student: one(students, { fields: [bookings.studentId], references: [students.id] }),\n  coach: one(coaches, { fields: [bookings.coachId], references: [coaches.id] }),\n  review: one(reviews, { fields: [bookings.id], references: [reviews.bookingId] }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  booking: one(bookings, { fields: [reviews.bookingId], references: [bookings.id] }),\n  student: one(students, { fields: [reviews.studentId], references: [students.id] }),\n  coach: one(coaches, { fields: [reviews.coachId], references: [coaches.id] }),\n}));\n\nexport const coachAvailabilityRelations = relations(coachAvailability, ({ one }) => ({\n  coach: one(coaches, { fields: [coachAvailability.coachId], references: [coaches.id] }),\n}));\n\nexport const coachCalendarSettingsRelations = relations(coachCalendarSettings, ({ one }) => ({\n  coach: one(coaches, { fields: [coachCalendarSettings.coachId], references: [coaches.id] }),\n}));\n\nexport const coachBusyTimesRelations = relations(coachBusyTimes, ({ one }) => ({\n  coach: one(coaches, { fields: [coachBusyTimes.coachId], references: [coaches.id] }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, { fields: [messages.senderId], references: [users.id] }),\n  receiver: one(users, { fields: [messages.receiverId], references: [users.id] }),\n  booking: one(bookings, { fields: [messages.bookingId], references: [bookings.id] }),\n}));\n\n// Insert schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCoachSchema = createInsertSchema(coaches).omit({\n  id: true,\n  createdAt: true,\n  rating: true,\n  reviewCount: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n  paymentStatus: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n});\n\n// TypeScript types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\n\nexport type Coach = typeof coaches.$inferSelect;\nexport type InsertCoach = z.infer<typeof insertCoachSchema>;\n\nexport type CoachSpecialty = typeof coachSpecialties.$inferSelect;\nexport type CoachTool = typeof coachTools.$inferSelect;\nexport type CoachCertification = typeof coachCertifications.$inferSelect;\nexport type CoachVideo = typeof coachVideos.$inferSelect;\n\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport type CoachAvailability = typeof coachAvailability.$inferSelect;\nexport type CoachCalendarSettings = typeof coachCalendarSettings.$inferSelect;\nexport type CoachBusyTimes = typeof coachBusyTimes.$inferSelect;\n\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n","size_bytes":14070},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport CoachRegistration from \"@/pages/coach-registration\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Profile from \"@/pages/profile\";\nimport MyBookings from \"@/pages/my-bookings\";\nimport Inbox from \"@/pages/inbox\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport HeroSection from \"@/components/HeroSection\";\nimport SearchFilters, { FilterState } from \"@/components/SearchFilters\";\nimport CoachList from \"@/components/CoachList\";\nimport BookingModal, { BookingData } from \"@/components/BookingModal\";\nimport CoachProfile from \"@/components/CoachProfile\";\nimport AuthModal from \"@/components/AuthModal\";\nimport { Coach } from \"@/components/CoachCard\";\nimport maleCoachImage from '@assets/generated_images/Male_golf_coach_headshot_893584c9.png';\nimport femaleCoachImage from '@assets/generated_images/Female_golf_coach_headshot_05d9fb5a.png';\nimport seniorCoachImage from '@assets/generated_images/Senior_golf_coach_headshot_d3798356.png';\n\n// TODO: remove mock functionality\nconst mockCoaches: Coach[] = [\n  {\n    id: '1',\n    name: 'Michael Johnson',\n    image: maleCoachImage,\n    rating: 4.8,\n    reviewCount: 127,\n    distance: '2.3 miles',\n    pricePerHour: 85,\n    bio: 'PGA Professional with over 15 years of experience teaching golfers of all skill levels. I specialize in helping students develop proper fundamentals while building confidence on the course. My teaching philosophy focuses on creating a relaxed learning environment where students can improve at their own pace.',\n    specialties: ['Swing Analysis', 'Putting', 'Course Strategy', 'Mental Game'],\n    location: 'Pine Valley Golf Club',\n    responseTime: '2 hours',\n    availability: 'Available this week',\n    tools: ['TrackMan 4', 'V1 Video Analysis', 'SAM PuttLab'],\n    certifications: ['PGA Class A Professional', 'TPI Certified'],\n    yearsExperience: 15,\n    videos: [{ id: '1', title: 'Swing Fundamentals', thumbnail: maleCoachImage, duration: '3:45', description: 'Basic swing mechanics' }],\n    googleReviewsUrl: 'https://g.page/r/pine-valley-golf/review',\n    googleRating: 4.6,\n    googleReviewCount: 89,\n    lastGoogleSync: '2024-01-15T10:30:00Z'\n  },\n  {\n    id: '2',\n    name: 'Sarah Williams',\n    image: femaleCoachImage,\n    rating: 4.9,\n    reviewCount: 89,\n    distance: '3.7 miles',\n    pricePerHour: 95,\n    bio: 'LPGA Teaching Professional specializing in junior development and women\\'s golf. I believe in making golf fun and accessible for players of all ages and skill levels. My lessons focus on building confidence through proper fundamentals and positive reinforcement.',\n    specialties: ['Junior Programs', 'Short Game', 'Mental Game', 'Putting', 'Course Strategy'],\n    location: 'Oakwood Country Club',\n    responseTime: '1 hour',\n    availability: 'Available today',\n    tools: ['FlightScope X3', 'OnForm Video App', 'SKLZ Training Aids'],\n    certifications: ['LPGA Class A Professional', 'PGA Junior Certified'],\n    yearsExperience: 12\n  },\n  {\n    id: '3',\n    name: 'Robert Chen',\n    image: seniorCoachImage,\n    rating: 4.7,\n    reviewCount: 203,\n    distance: '5.1 miles',\n    pricePerHour: 120,\n    bio: 'Former PGA Tour player with 25+ years of teaching experience. Having competed at the highest level, I bring tour-proven techniques and strategies to help serious golfers reach their potential. Specializing in advanced shot-making and course management.',\n    specialties: ['Tournament Prep', 'Advanced Techniques', 'Course Management', 'Swing Analysis', 'Mental Game'],\n    location: 'Championship Links',\n    responseTime: '3 hours',\n    availability: 'Available next week',\n    tools: ['GC Quad Launch Monitor', 'Foresight Sports', 'K-Coach Video Analysis', 'BodiTrak Pressure Mat'],\n    certifications: ['Former PGA Tour Player', 'Master Professional'],\n    yearsExperience: 25,\n    googleReviewsUrl: 'https://g.page/r/championship-links-golf/review',\n    googleRating: 4.9,\n    googleReviewCount: 156,\n    lastGoogleSync: '2024-01-18T14:20:00Z'\n  },\n  {\n    id: '4',\n    name: 'Jennifer Martinez',\n    image: femaleCoachImage,\n    rating: 4.9,\n    reviewCount: 156,\n    distance: '4.2 miles',\n    pricePerHour: 75,\n    bio: 'PGA Teaching Professional passionate about helping beginners fall in love with golf. I create comfortable, encouraging environments where students can learn without pressure. My patient approach helps nervous beginners become confident golfers.',\n    specialties: ['Beginner Instruction', 'Short Game', 'Putting', 'Golf Etiquette'],\n    location: 'Green Meadows Golf Course',\n    responseTime: '1 hour',\n    availability: 'Available this week',\n    tools: ['Mirror Training Aid', 'Alignment Sticks', 'Impact Bag', 'Basic Video Setup'],\n    certifications: ['PGA Class A Professional', 'Get Golf Ready Instructor'],\n    yearsExperience: 8\n  },\n  {\n    id: '5',\n    name: 'David Thompson',\n    image: maleCoachImage,\n    rating: 4.6,\n    reviewCount: 91,\n    distance: '6.8 miles',\n    pricePerHour: 110,\n    bio: 'Certified TPI (Titleist Performance Institute) instructor focusing on the physical aspects of golf. I combine technical instruction with fitness and mobility training to help golfers play their best while staying injury-free.',\n    specialties: ['Swing Analysis', 'Fitness Training', 'Injury Prevention', 'Advanced Techniques'],\n    location: 'Elite Golf Academy',\n    responseTime: '4 hours',\n    availability: 'Available next week',\n    tools: ['3D Motion Capture', 'TPI Screen Tools', 'Resistance Bands', 'K-Vest 3D Analysis'],\n    certifications: ['TPI Certified Level 3', 'NASM Certified Trainer'],\n    yearsExperience: 10\n  }\n];\n\nfunction HomePage() {\n  const [searchLocation, setSearchLocation] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showBookingModal, setShowBookingModal] = useState(false);\n  const [showProfileModal, setShowProfileModal] = useState(false);\n  const [selectedCoach, setSelectedCoach] = useState<Coach | null>(null);\n  const [filtersVisible, setFiltersVisible] = useState(false);\n  \n  const [filters, setFilters] = useState<FilterState>({\n    priceRange: [25, 200],\n    rating: 'any',\n    specialties: [],\n    availability: 'any',\n    experience: 'any',\n    sortBy: 'distance'\n  });\n\n  // Filter and sort coaches based on current filters\n  const getFilteredAndSortedCoaches = () => {\n    let filteredCoaches = [...mockCoaches];\n\n    // Apply price range filter\n    filteredCoaches = filteredCoaches.filter(coach => \n      coach.pricePerHour >= filters.priceRange[0] && \n      coach.pricePerHour <= filters.priceRange[1]\n    );\n\n    // Apply minimum rating filter\n    if (filters.rating !== 'any') {\n      const minRating = parseFloat(filters.rating);\n      filteredCoaches = filteredCoaches.filter(coach => coach.rating >= minRating);\n    }\n\n    // Apply specialties filter\n    if (filters.specialties.length > 0) {\n      filteredCoaches = filteredCoaches.filter(coach => \n        filters.specialties.some(specialty => \n          coach.specialties.includes(specialty)\n        )\n      );\n    }\n\n    // Apply experience filter\n    if (filters.experience !== 'any') {\n      const minYears = parseInt(filters.experience.replace('+', ''));\n      filteredCoaches = filteredCoaches.filter(coach => \n        coach.yearsExperience >= minYears\n      );\n    }\n\n    // Apply availability filter\n    if (filters.availability !== 'any') {\n      filteredCoaches = filteredCoaches.filter(coach => {\n        const availability = coach.availability.toLowerCase();\n        switch (filters.availability) {\n          case 'today':\n            return availability.includes('today');\n          case 'week':\n            return availability.includes('week');\n          case 'weekend':\n            return availability.includes('weekend');\n          default:\n            return true;\n        }\n      });\n    }\n\n    // Apply sorting\n    switch (filters.sortBy) {\n      case 'rating':\n        filteredCoaches.sort((a, b) => b.rating - a.rating);\n        break;\n      case 'price_low':\n        filteredCoaches.sort((a, b) => a.pricePerHour - b.pricePerHour);\n        break;\n      case 'price_high':\n        filteredCoaches.sort((a, b) => b.pricePerHour - a.pricePerHour);\n        break;\n      case 'reviews':\n        filteredCoaches.sort((a, b) => b.reviewCount - a.reviewCount);\n        break;\n      case 'distance':\n      default:\n        // Keep original order for distance (mock data doesn't have numeric distance)\n        break;\n    }\n\n    return filteredCoaches;\n  };\n\n  const coaches = getFilteredAndSortedCoaches();\n\n  const handleSearch = (location: string) => {\n    setSearchLocation(location);\n    setIsLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsLoading(false);\n      console.log(`Searching for coaches in ${location}`);\n    }, 1500);\n  };\n\n  const handleViewProfile = (coach: Coach) => {\n    setSelectedCoach(coach);\n    setShowProfileModal(true);\n  };\n\n  const handleBookLesson = (coach: Coach) => {\n    setSelectedCoach(coach);\n    setShowBookingModal(true);\n  };\n\n  const handleBookingConfirm = (bookingData: BookingData) => {\n    console.log('Booking confirmed:', bookingData);\n    setShowBookingModal(false);\n    setSelectedCoach(null);\n  };\n\n  const handleAuth = async (type: 'login' | 'signup', data: any) => {\n    console.log(`${type} attempt:`, data);\n    \n    try {\n      const endpoint = type === 'signup' ? '/api/auth/register' : '/api/auth/login';\n      const payload = { email: data.email, password: data.password };\n\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || `${type} failed`);\n      }\n\n      const result = await response.json();\n      console.log(`${type} successful:`, result);\n      \n      // Close modal on success\n      setShowAuthModal(false);\n      \n      // Reload the page to update the UI with the logged-in state\n      window.location.reload();\n      \n    } catch (error) {\n      console.error(`${type} error:`, error);\n      alert(error instanceof Error ? error.message : `${type} failed`);\n    }\n  };\n\n  const handleFiltersChange = (newFilters: FilterState) => {\n    setFilters(newFilters);\n    console.log('Filters changed:', newFilters);\n    console.log('Filtered coaches count:', getFilteredAndSortedCoaches().length);\n  };\n\n  const handleClearFilters = () => {\n    const clearedFilters: FilterState = {\n      priceRange: [25, 200],\n      rating: 'any',\n      specialties: [],\n      availability: 'any',\n      experience: 'any',\n      sortBy: 'distance'\n    };\n    setFilters(clearedFilters);\n    console.log('Filters cleared');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        onSearch={handleSearch}\n        onAuthClick={() => {\n          console.log(\"Sign-in button clicked, opening modal\");\n          setShowAuthModal(true);\n        }}\n      />\n      \n      <HeroSection onSearch={handleSearch} />\n      \n      {/* Main Content */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex gap-8\">\n          {/* Filters Sidebar */}\n          <aside className=\"w-80 flex-shrink-0 hidden lg:block\">\n            <SearchFilters\n              filters={filters}\n              onFiltersChange={handleFiltersChange}\n              onClearFilters={handleClearFilters}\n              isVisible={true}\n              onToggle={() => {}}\n            />\n          </aside>\n          \n          {/* Results */}\n          <main className=\"flex-1\">\n            {/* Mobile Filters */}\n            <div className=\"lg:hidden mb-6\">\n              <SearchFilters\n                filters={filters}\n                onFiltersChange={handleFiltersChange}\n                onClearFilters={handleClearFilters}\n                isVisible={filtersVisible}\n                onToggle={() => setFiltersVisible(!filtersVisible)}\n              />\n            </div>\n            \n            <CoachList\n              coaches={coaches}\n              isLoading={isLoading}\n              onViewProfile={handleViewProfile}\n              onBookLesson={handleBookLesson}\n            />\n          </main>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <AuthModal \n        isOpen={showAuthModal}\n        onClose={() => setShowAuthModal(false)}\n        onAuth={handleAuth}\n      />\n      \n      <BookingModal\n        coach={selectedCoach}\n        isOpen={showBookingModal}\n        onClose={() => {\n          setShowBookingModal(false);\n          setSelectedCoach(null);\n        }}\n        onBook={handleBookingConfirm}\n      />\n      \n      <CoachProfile\n        coach={selectedCoach}\n        isOpen={showProfileModal}\n        onClose={() => {\n          setShowProfileModal(false);\n          setSelectedCoach(null);\n        }}\n        onBookLesson={handleBookLesson}\n      />\n    </div>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/coach-registration\" component={CoachRegistration} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/my-bookings\" component={MyBookings} />\n      <Route path=\"/inbox\" component={Inbox} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen flex flex-col\">\n          <div className=\"flex-1\">\n            <Router />\n          </div>\n          <Footer />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":14250},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 13% 15%;\n\n  --border: 220 13% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 220 13% 15%;\n\n  --card-border: 220 13% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 220 13% 15%;\n\n  --sidebar-border: 220 13% 86%;\n\n  --sidebar-primary: 142 69% 58%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 90%;\n\n  --sidebar-accent-foreground: 220 13% 15%;\n\n  --sidebar-ring: 142 45% 55%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 220 13% 15%;\n\n  --popover-border: 220 13% 84%;\n\n  --primary: 142 69% 58%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 88%;\n\n  --secondary-foreground: 220 13% 15%;\n\n  --muted: 0 2% 90%;\n\n  --muted-foreground: 220 13% 45%;\n\n  --accent: 142 15% 92%;\n\n  --accent-foreground: 220 13% 15%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 75%;\n  --ring: 142 45% 55%;\n  --chart-1: 142 69% 45%;\n  --chart-2: 43 74% 49%;\n  --chart-3: 217 91% 60%;\n  --chart-4: 262 83% 58%;\n  --chart-5: 25 95% 53%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 9% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 9% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 9% / 0.05), 0px 1px 2px -1px hsl(220 13% 9% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 9% / 0.05), 0px 1px 2px -1px hsl(220 13% 9% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 9% / 0.05), 0px 2px 4px -1px hsl(220 13% 9% / 0.12);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 9% / 0.05), 0px 4px 6px -1px hsl(220 13% 9% / 0.15);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 9% / 0.05), 0px 8px 10px -1px hsl(220 13% 9% / 0.20);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 9% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 9%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 13% 18%;\n\n  --card: 220 13% 11%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 13% 20%;\n\n  --sidebar: 220 13% 13%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 13% 22%;\n\n  --sidebar-primary: 142 45% 35%;\n\n  --sidebar-primary-foreground: 0 0% 95%;\n\n  --sidebar-accent: 220 13% 20%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 142 45% 55%;\n\n  --popover: 220 13% 15%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 13% 24%;\n\n  --primary: 142 45% 35%;\n\n  --primary-foreground: 0 0% 95%;\n\n  --secondary: 220 13% 24%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 220 13% 18%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 220 13% 16%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 0% 95%;\n\n  --input: 220 13% 35%;\n  --ring: 142 45% 55%;\n  --chart-1: 142 69% 75%;\n  --chart-2: 43 74% 70%;\n  --chart-3: 217 91% 75%;\n  --chart-4: 262 83% 75%;\n  --chart-5: 25 95% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.15);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.15), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.15), 0px 1px 2px -1px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.15), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.15), 0px 4px 6px -1px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.15), 0px 8px 10px -1px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.45);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9741},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Eye, EyeOff, Mail, Lock, User } from \"lucide-react\";\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAuth: (type: 'login' | 'signup', data: any) => void;\n}\n\nexport default function AuthModal({ isOpen, onClose, onAuth }: AuthModalProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [loginData, setLoginData] = useState({ email: \"\", password: \"\" });\n  const [signupData, setSignupData] = useState({ \n    name: \"\", \n    email: \"\", \n    password: \"\", \n    confirmPassword: \"\" \n  });\n\n  // Debug logging to see modal state changes\n  console.log(\"AuthModal rendered, isOpen:\", isOpen);\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    onAuth('login', loginData);\n    console.log(\"Login attempt:\", loginData);\n  };\n\n  const handleSignup = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (signupData.password !== signupData.confirmPassword) {\n      console.log(\"Passwords don't match\");\n      return;\n    }\n    onAuth('signup', signupData);\n    console.log(\"Signup attempt:\", signupData);\n  };\n\n  const handleSocialLogin = (provider: string) => {\n    alert(`${provider} sign-in coming soon! For now, please use email and password to create your account.`);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center text-2xl\">Welcome to FairwayPro</DialogTitle>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\" className=\"space-y-4\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"login-email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"login-email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={loginData.email}\n                    onChange={(e) => setLoginData({...loginData, email: e.target.value})}\n                    className=\"pl-10\"\n                    required\n                    data-testid=\"input-login-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"login-password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"login-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    value={loginData.password}\n                    onChange={(e) => setLoginData({...loginData, password: e.target.value})}\n                    className=\"pl-10 pr-10\"\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login-submit\">\n                Sign In\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <Button variant=\"ghost\" className=\"text-sm text-primary\">\n                Forgot your password?\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"signup\" className=\"space-y-4\">\n            <form onSubmit={handleSignup} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"signup-name\">Full Name</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"signup-name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={signupData.name}\n                    onChange={(e) => setSignupData({...signupData, name: e.target.value})}\n                    className=\"pl-10\"\n                    required\n                    data-testid=\"input-signup-name\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"signup-email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"signup-email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={signupData.email}\n                    onChange={(e) => setSignupData({...signupData, email: e.target.value})}\n                    className=\"pl-10\"\n                    required\n                    data-testid=\"input-signup-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"signup-password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"signup-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Create a password\"\n                    value={signupData.password}\n                    onChange={(e) => setSignupData({...signupData, password: e.target.value})}\n                    className=\"pl-10 pr-10\"\n                    required\n                    data-testid=\"input-signup-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"signup-confirm-password\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"signup-confirm-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Confirm your password\"\n                    value={signupData.confirmPassword}\n                    onChange={(e) => setSignupData({...signupData, confirmPassword: e.target.value})}\n                    className=\"pl-10\"\n                    required\n                    data-testid=\"input-signup-confirm-password\"\n                  />\n                </div>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-signup-submit\">\n                Create Account\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <Separator />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => handleSocialLogin('Google')}\n              data-testid=\"button-login-google\"\n            >\n              <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n              </svg>\n              Google\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={() => handleSocialLogin('Apple')}\n              data-testid=\"button-login-apple\"\n            >\n              <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M17.05 20.28c-.98.95-2.05.8-3.08.35-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.35C2.79 15.25 3.51 7.59 9.05 7.31c1.35.07 2.29.74 3.08.8 1.18-.24 2.31-.93 3.57-.84 1.51.12 2.65.72 3.4 1.8-3.12 1.87-2.38 5.98.48 7.13-.57 1.5-1.31 2.99-2.54 4.09l.01-.01zM12.03 7.25c-.15-2.23 1.66-4.07 3.74-4.25.29 2.58-2.34 4.5-3.74 4.25z\"/>\n              </svg>\n              Apple\n            </Button>\n          </div>\n        </div>\n\n        <p className=\"text-center text-sm text-muted-foreground\">\n          By continuing, you agree to our{\" \"}\n          <Button variant=\"ghost\" className=\"p-0 h-auto text-sm\">\n            Terms of Service\n          </Button>{\" \"}\n          and{\" \"}\n          <Button variant=\"ghost\" className=\"p-0 h-auto text-sm\">\n            Privacy Policy\n          </Button>\n        </p>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10895},"client/src/components/BookingModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Calendar as CalendarIcon, Clock, DollarSign, MapPin } from \"lucide-react\";\nimport { Coach } from \"./CoachCard\";\n\ninterface BookingModalProps {\n  coach: Coach | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onBook: (bookingData: BookingData) => void;\n}\n\nexport interface BookingData {\n  coachId: string;\n  date: Date;\n  time: string;\n  duration: string;\n  lessonType: string;\n  location: string;\n  notes: string;\n  studentInfo: {\n    name: string;\n    email: string;\n    phone: string;\n    skillLevel: string;\n  };\n}\n\nexport default function BookingModal({ coach, isOpen, onClose, onBook }: BookingModalProps) {\n  const [selectedDate, setSelectedDate] = useState<Date>();\n  const [selectedTime, setSelectedTime] = useState(\"\");\n  const [duration, setDuration] = useState(\"60\");\n  const [lessonType, setLessonType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [studentInfo, setStudentInfo] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    skillLevel: \"\"\n  });\n\n  if (!coach) return null;\n\n  // TODO: remove mock functionality\n  const availableTimes = [\n    \"9:00 AM\", \"10:00 AM\", \"11:00 AM\", \"1:00 PM\", \"2:00 PM\", \"3:00 PM\", \"4:00 PM\"\n  ];\n\n  const lessonTypes = [\n    { value: \"individual\", label: \"Individual Lesson\", price: coach.pricePerHour },\n    { value: \"group\", label: \"Small Group (2-3)\", price: Math.round(coach.pricePerHour * 0.7) },\n    { value: \"playing\", label: \"Playing Lesson\", price: coach.pricePerHour + 30 }\n  ];\n\n  const calculateTotal = () => {\n    const selectedLessonType = lessonTypes.find(t => t.value === lessonType);\n    if (!selectedLessonType) return 0;\n    \n    const hours = parseInt(duration) / 60;\n    return Math.round(selectedLessonType.price * hours);\n  };\n\n  const handleBook = () => {\n    if (!selectedDate || !selectedTime || !lessonType || !studentInfo.name || !studentInfo.email) {\n      console.log(\"Please fill in all required fields\");\n      return;\n    }\n\n    const bookingData: BookingData = {\n      coachId: coach.id,\n      date: selectedDate,\n      time: selectedTime,\n      duration,\n      lessonType,\n      location: location || coach.location,\n      notes,\n      studentInfo\n    };\n\n    onBook(bookingData);\n    console.log(\"Booking submitted:\", bookingData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarImage src={coach.image} alt={coach.name} />\n              <AvatarFallback>\n                {coach.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            Book a lesson with {coach.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Coach Info Summary */}\n          <div className=\"bg-muted/50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div className=\"flex items-center gap-2\">\n                <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm\">{coach.location}</span>\n              </div>\n              <Badge variant=\"outline\">{coach.rating} ⭐ ({coach.reviewCount})</Badge>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">{coach.bio}</p>\n          </div>\n\n          {/* Lesson Type Selection */}\n          <div>\n            <Label className=\"text-base font-medium\">Lesson Type *</Label>\n            <div className=\"grid gap-3 mt-2\">\n              {lessonTypes.map((type) => (\n                <div \n                  key={type.value}\n                  className={`border rounded-lg p-4 cursor-pointer transition-colors ${\n                    lessonType === type.value \n                      ? 'border-primary bg-primary/5' \n                      : 'border-border hover:border-primary/50'\n                  }`}\n                  onClick={() => setLessonType(type.value)}\n                  data-testid={`select-lesson-type-${type.value}`}\n                >\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">{type.label}</span>\n                    <span className=\"text-primary font-bold\">${type.price}/hr</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Date & Time Selection */}\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <Label className=\"text-base font-medium\">Select Date *</Label>\n              <div className=\"mt-2\">\n                <Calendar\n                  mode=\"single\"\n                  selected={selectedDate}\n                  onSelect={setSelectedDate}\n                  disabled={(date) => date < new Date() || date.getDay() === 0}\n                  className=\"rounded-md border\"\n                  data-testid=\"calendar-date-selection\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-base font-medium\">Available Times *</Label>\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  {availableTimes.map((time) => (\n                    <Button\n                      key={time}\n                      variant={selectedTime === time ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setSelectedTime(time)}\n                      data-testid={`button-time-${time.replace(/[: ]/g, '-')}`}\n                    >\n                      {time}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"duration\" className=\"text-base font-medium\">Duration</Label>\n                <Select value={duration} onValueChange={setDuration}>\n                  <SelectTrigger className=\"mt-2\" data-testid=\"select-duration\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"30\">30 minutes</SelectItem>\n                    <SelectItem value=\"60\">1 hour</SelectItem>\n                    <SelectItem value=\"90\">1.5 hours</SelectItem>\n                    <SelectItem value=\"120\">2 hours</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Student Information */}\n          <div>\n            <Label className=\"text-base font-medium mb-3 block\">Student Information</Label>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Full Name *</Label>\n                <Input\n                  id=\"name\"\n                  value={studentInfo.name}\n                  onChange={(e) => setStudentInfo({...studentInfo, name: e.target.value})}\n                  placeholder=\"Enter your full name\"\n                  className=\"mt-1\"\n                  data-testid=\"input-student-name\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={studentInfo.email}\n                  onChange={(e) => setStudentInfo({...studentInfo, email: e.target.value})}\n                  placeholder=\"Enter your email\"\n                  className=\"mt-1\"\n                  data-testid=\"input-student-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <Input\n                  id=\"phone\"\n                  value={studentInfo.phone}\n                  onChange={(e) => setStudentInfo({...studentInfo, phone: e.target.value})}\n                  placeholder=\"Enter your phone\"\n                  className=\"mt-1\"\n                  data-testid=\"input-student-phone\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"skill-level\">Skill Level</Label>\n                <Select \n                  value={studentInfo.skillLevel} \n                  onValueChange={(value) => setStudentInfo({...studentInfo, skillLevel: value})}\n                >\n                  <SelectTrigger className=\"mt-1\" data-testid=\"select-skill-level\">\n                    <SelectValue placeholder=\"Select skill level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"beginner\">Beginner</SelectItem>\n                    <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                    <SelectItem value=\"advanced\">Advanced</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Location & Notes */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"location\">Preferred Location</Label>\n              <Input\n                id=\"location\"\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n                placeholder={`Default: ${coach.location}`}\n                className=\"mt-1\"\n                data-testid=\"input-lesson-location\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"notes\">Special Notes</Label>\n              <Textarea\n                id=\"notes\"\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Any specific goals or requirements for the lesson?\"\n                className=\"mt-1\"\n                data-testid=\"textarea-lesson-notes\"\n              />\n            </div>\n          </div>\n\n          {/* Booking Summary */}\n          {lessonType && selectedDate && selectedTime && (\n            <div className=\"bg-muted/50 rounded-lg p-4\">\n              <h4 className=\"font-medium mb-2\">Booking Summary</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Date:</span>\n                  <span>{selectedDate.toLocaleDateString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Time:</span>\n                  <span>{selectedTime}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Duration:</span>\n                  <span>{parseInt(duration) === 60 ? '1 hour' : `${duration} minutes`}</span>\n                </div>\n                <div className=\"flex justify-between font-bold text-base pt-2 border-t\">\n                  <span>Total:</span>\n                  <span className=\"text-primary\">${calculateTotal()}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleBook}\n              disabled={!selectedDate || !selectedTime || !lessonType || !studentInfo.name || !studentInfo.email}\n              className=\"flex-1\"\n              data-testid=\"button-confirm-booking\"\n            >\n              Book Lesson - ${calculateTotal()}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12221},"client/src/components/CoachCard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Star, MapPin, Clock, DollarSign } from \"lucide-react\";\n\nexport interface Coach {\n  id: string;\n  name: string;\n  image?: string;\n  rating: number;\n  reviewCount: number;\n  distance: string;\n  pricePerHour: number;\n  bio: string;\n  specialties: string[];\n  location: string;\n  responseTime: string;\n  availability: string;\n  tools: string[];\n  videos?: {\n    id: string;\n    title: string;\n    thumbnail: string;\n    duration: string;\n    description: string;\n  }[];\n  certifications: string[];\n  yearsExperience: number;\n  googleReviewsUrl?: string;\n  googleRating?: number;\n  googleReviewCount?: number;\n  lastGoogleSync?: string;\n}\n\ninterface CoachCardProps {\n  coach: Coach;\n  onViewProfile: (coach: Coach) => void;\n  onBookLesson: (coach: Coach) => void;\n}\n\nexport default function CoachCard({ coach, onViewProfile, onBookLesson }: CoachCardProps) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${\n          i < Math.floor(rating) \n            ? 'text-yellow-400 fill-current' \n            : 'text-gray-300'\n        }`}\n      />\n    ));\n  };\n\n  return (\n    <Card \n      className=\"hover-elevate cursor-pointer transition-all duration-200\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onClick={() => onViewProfile(coach)}\n      data-testid={`card-coach-${coach.id}`}\n    >\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start gap-4\">\n          {/* Profile Image */}\n          <Avatar className=\"w-16 h-16 border-2 border-primary/20\">\n            <AvatarImage src={coach.image} alt={coach.name} />\n            <AvatarFallback className=\"bg-primary text-primary-foreground\">\n              {coach.name.split(' ').map(n => n[0]).join('')}\n            </AvatarFallback>\n          </Avatar>\n\n          {/* Coach Info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <div>\n                <h3 className=\"font-semibold text-lg mb-1\" data-testid={`text-coach-name-${coach.id}`}>\n                  {coach.name}\n                </h3>\n                <div className=\"space-y-1 mb-2\">\n                  {/* Platform Rating */}\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"flex items-center\">\n                      {renderStars(coach.rating)}\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\" data-testid={`text-rating-${coach.id}`}>\n                      {coach.rating} ({coach.reviewCount} platform reviews)\n                    </span>\n                  </div>\n                  \n                  {/* Google Reviews Rating */}\n                  {coach.googleRating && coach.googleReviewCount && (\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"flex items-center\">\n                        {renderStars(coach.googleRating)}\n                      </div>\n                      <span className=\"text-sm text-green-600 font-medium\" data-testid={`text-google-rating-${coach.id}`}>\n                        {coach.googleRating} Google ({coach.googleReviewCount} reviews)\n                      </span>\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"text-2xl font-bold text-primary\" data-testid={`text-price-${coach.id}`}>\n                  ${coach.pricePerHour}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">per hour</div>\n              </div>\n            </div>\n\n            {/* Location & Distance */}\n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-3\">\n              <div className=\"flex items-center gap-1\">\n                <MapPin className=\"w-4 h-4\" />\n                <span>{coach.location}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <span>{coach.distance} away</span>\n              </div>\n            </div>\n\n            {/* Bio */}\n            <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n              {coach.bio}\n            </p>\n\n            {/* Tools & Equipment */}\n            {coach.tools && coach.tools.length > 0 && (\n              <div className=\"mb-3\">\n                <div className=\"flex items-center gap-1 mb-2\">\n                  <span className=\"text-xs font-medium text-muted-foreground\">TOOLS:</span>\n                </div>\n                <div className=\"flex flex-wrap gap-1\">\n                  {coach.tools.slice(0, 3).map((tool, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {tool}\n                    </Badge>\n                  ))}\n                  {coach.tools.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{coach.tools.length - 3} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Specialties */}\n            <div className=\"flex flex-wrap gap-1 mb-4\">\n              {coach.specialties.slice(0, 3).map((specialty, index) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {specialty}\n                </Badge>\n              ))}\n              {coach.specialties.length > 3 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{coach.specialties.length - 3} more\n                </Badge>\n              )}\n            </div>\n\n            {/* Response Time */}\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground mb-4\">\n              <Clock className=\"w-4 h-4\" />\n              <span>Responds in {coach.responseTime}</span>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"flex-1\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onViewProfile(coach);\n                }}\n                data-testid={`button-view-profile-${coach.id}`}\n              >\n                View Profile\n              </Button>\n              <Button \n                size=\"sm\" \n                className=\"flex-1\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onBookLesson(coach);\n                }}\n                data-testid={`button-book-lesson-${coach.id}`}\n              >\n                Book Lesson\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7193},"client/src/components/CoachList.tsx":{"content":"import { useState } from \"react\";\nimport CoachCard, { Coach } from \"./CoachCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface CoachListProps {\n  coaches: Coach[];\n  isLoading: boolean;\n  onLoadMore?: () => void;\n  hasMore?: boolean;\n  onViewProfile: (coach: Coach) => void;\n  onBookLesson: (coach: Coach) => void;\n}\n\nexport default function CoachList({ \n  coaches, \n  isLoading, \n  onLoadMore, \n  hasMore = false,\n  onViewProfile, \n  onBookLesson \n}: CoachListProps) {\n  if (isLoading && coaches.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin mx-auto mb-4 text-primary\" />\n          <p className=\"text-muted-foreground\">Finding coaches near you...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isLoading && coaches.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <span className=\"text-2xl\">🏌️</span>\n          </div>\n          <h3 className=\"text-xl font-semibold mb-2\">No coaches found</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            We couldn't find any golf coaches in your area. Try expanding your search radius or adjusting your filters.\n          </p>\n          <Button variant=\"outline\">Expand Search Area</Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Results header */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold\" data-testid=\"text-results-count\">\n          {coaches.length} coach{coaches.length !== 1 ? 'es' : ''} found\n        </h2>\n      </div>\n\n      {/* Coach grid */}\n      <div className=\"grid gap-6\">\n        {coaches.map((coach) => (\n          <CoachCard\n            key={coach.id}\n            coach={coach}\n            onViewProfile={onViewProfile}\n            onBookLesson={onBookLesson}\n          />\n        ))}\n      </div>\n\n      {/* Load more button */}\n      {hasMore && (\n        <div className=\"text-center pt-6\">\n          <Button \n            onClick={onLoadMore}\n            variant=\"outline\"\n            disabled={isLoading}\n            data-testid=\"button-load-more\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Loading...\n              </>\n            ) : (\n              'Load More Coaches'\n            )}\n          </Button>\n        </div>\n      )}\n\n      {/* Loading indicator for more results */}\n      {isLoading && coaches.length > 0 && (\n        <div className=\"text-center py-6\">\n          <Loader2 className=\"w-6 h-6 animate-spin mx-auto text-primary\" />\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2952},"client/src/components/CoachProfile.tsx":{"content":"import { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Star, MapPin, Clock, Phone, Mail, Calendar, Award } from \"lucide-react\";\nimport { Coach } from \"./CoachCard\";\n\ninterface CoachProfileProps {\n  coach: Coach | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onBookLesson: (coach: Coach) => void;\n}\n\nexport default function CoachProfile({ coach, isOpen, onClose, onBookLesson }: CoachProfileProps) {\n  if (!coach) return null;\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-5 h-5 ${\n          i < Math.floor(rating) \n            ? 'text-yellow-400 fill-current' \n            : 'text-gray-300'\n        }`}\n      />\n    ));\n  };\n\n  // TODO: remove mock functionality\n  const mockReviews = [\n    {\n      id: '1',\n      name: 'Sarah M.',\n      rating: 5,\n      date: '2 weeks ago',\n      comment: 'Excellent instructor! Really helped improve my swing mechanics.'\n    },\n    {\n      id: '2',\n      name: 'John D.',\n      rating: 5,\n      date: '1 month ago',\n      comment: 'Great patience and clear explanations. Highly recommend!'\n    },\n    {\n      id: '3',\n      name: 'Lisa K.',\n      rating: 4,\n      date: '2 months ago',\n      comment: 'Very knowledgeable and professional. My putting has improved significantly.'\n    }\n  ];\n\n  const mockCertifications = [\n    'PGA Class A Professional',\n    'TPI Certified (Titleist Performance Institute)',\n    'US Kids Golf Certified',\n    'First Aid & CPR Certified'\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto p-0\">\n        {/* Header */}\n        <div className=\"bg-primary/10 p-6\">\n          <div className=\"flex items-start gap-6\">\n            <Avatar className=\"w-24 h-24 border-4 border-white shadow-lg\">\n              <AvatarImage src={coach.image} alt={coach.name} />\n              <AvatarFallback className=\"bg-primary text-primary-foreground text-2xl\">\n                {coach.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            \n            <div className=\"flex-1\">\n              <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-profile-name\">\n                {coach.name}\n              </h2>\n              \n              <div className=\"flex items-center gap-2 mb-3\">\n                <div className=\"flex items-center\">\n                  {renderStars(coach.rating)}\n                </div>\n                <span className=\"text-lg font-semibold\" data-testid=\"text-profile-rating\">\n                  {coach.rating}\n                </span>\n                <span className=\"text-muted-foreground\">\n                  ({coach.reviewCount} reviews)\n                </span>\n              </div>\n              \n              <div className=\"flex items-center gap-4 text-muted-foreground mb-4\">\n                <div className=\"flex items-center gap-1\">\n                  <MapPin className=\"w-4 h-4\" />\n                  <span>{coach.location}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <span>{coach.distance} away</span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-profile-price\">\n                  ${coach.pricePerHour}<span className=\"text-base font-normal text-muted-foreground\">/hour</span>\n                </div>\n                <Button \n                  size=\"lg\" \n                  onClick={() => onBookLesson(coach)}\n                  data-testid=\"button-profile-book-lesson\"\n                >\n                  Book Lesson\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6 space-y-8\">\n          {/* About Section */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-3\">About</h3>\n            <p className=\"text-muted-foreground leading-relaxed\">{coach.bio}</p>\n          </div>\n\n          {/* Tools & Equipment */}\n          {coach.tools && coach.tools.length > 0 && (\n            <div>\n              <h3 className=\"text-xl font-bold mb-3\">Teaching Tools & Equipment</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                {coach.tools.map((tool, index) => (\n                  <div key={index} className=\"flex items-center gap-2 p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"text-primary text-sm\">🔧</span>\n                    </div>\n                    <span className=\"text-sm font-medium\">{tool}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Video Gallery */}\n          {coach.videos && coach.videos.length > 0 && (\n            <div>\n              <h3 className=\"text-xl font-bold mb-3\">Instructional Videos</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {coach.videos.map((video) => (\n                  <Card key={video.id} className=\"hover-elevate cursor-pointer\">\n                    <CardContent className=\"p-0\">\n                      <div className=\"relative\">\n                        <img \n                          src={video.thumbnail} \n                          alt={video.title}\n                          className=\"w-full h-32 object-cover rounded-t-lg\"\n                        />\n                        <div className=\"absolute inset-0 bg-black/20 rounded-t-lg flex items-center justify-center\">\n                          <div className=\"w-12 h-12 bg-white/90 rounded-full flex items-center justify-center\">\n                            <div className=\"w-0 h-0 border-l-[8px] border-l-primary border-y-[6px] border-y-transparent ml-1\" />\n                          </div>\n                        </div>\n                        <div className=\"absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded\">\n                          {video.duration}\n                        </div>\n                      </div>\n                      <div className=\"p-3\">\n                        <h4 className=\"font-medium text-sm mb-1\">{video.title}</h4>\n                        <p className=\"text-xs text-muted-foreground\">{video.description}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Specialties & Certifications */}\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div>\n              <h3 className=\"text-xl font-bold mb-3\">Specialties</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {coach.specialties.map((specialty, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-sm py-1\">\n                    {specialty}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-xl font-bold mb-3\">Certifications & Experience</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Award className=\"w-4 h-4 text-primary\" />\n                  <span className=\"text-sm font-medium\">{coach.yearsExperience}+ years of experience</span>\n                </div>\n                {coach.certifications?.map((cert, index) => (\n                  <div key={index} className=\"flex items-center gap-2\">\n                    <Award className=\"w-4 h-4 text-primary\" />\n                    <span className=\"text-sm\">{cert}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Info */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-3\">Quick Info</h3>\n            <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Clock className=\"w-5 h-5 text-primary\" />\n                    <div>\n                      <div className=\"font-medium\">Response Time</div>\n                      <div className=\"text-sm text-muted-foreground\">{coach.responseTime}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Calendar className=\"w-5 h-5 text-primary\" />\n                    <div>\n                      <div className=\"font-medium\">Availability</div>\n                      <div className=\"text-sm text-muted-foreground\">{coach.availability}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <MapPin className=\"w-5 h-5 text-primary\" />\n                    <div>\n                      <div className=\"font-medium\">Distance</div>\n                      <div className=\"text-sm text-muted-foreground\">{coach.distance}</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Reviews Section */}\n          <div>\n            <h3 className=\"text-xl font-bold mb-4\">Recent Reviews</h3>\n            <div className=\"space-y-4\">\n              {mockReviews.map((review) => (\n                <Card key={review.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Avatar className=\"w-8 h-8\">\n                          <AvatarFallback className=\"text-xs bg-muted\">\n                            {review.name.split(' ').map(n => n[0]).join('')}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"font-medium text-sm\">{review.name}</div>\n                          <div className=\"flex items-center gap-1\">\n                            {renderStars(review.rating)}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">{review.date}</div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{review.comment}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Contact Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-3 pt-4 border-t\">\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              data-testid=\"button-profile-message\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" />\n              Send Message\n            </Button>\n            <Button \n              className=\"flex-1\" \n              onClick={() => onBookLesson(coach)}\n              data-testid=\"button-profile-book-now\"\n            >\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Book Lesson Now\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11912},"client/src/components/Header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, MapPin, User, Crosshair, Calendar, MessageCircle, LogOut, UserCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  name?: string;\n}\n\ninterface HeaderProps {\n  onSearch: (location: string) => void;\n  onAuthClick: () => void;\n}\n\nexport default function Header({ onSearch, onAuthClick }: HeaderProps) {\n  const [location, setLocation] = useState(\"\");\n  const [isGettingLocation, setIsGettingLocation] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isLoadingAuth, setIsLoadingAuth] = useState(true);\n\n  // Check authentication status on component mount\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('/api/auth/me', {\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setCurrentUser(data.user);\n      } else {\n        setCurrentUser(null);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      setCurrentUser(null);\n    } finally {\n      setIsLoadingAuth(false);\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        setCurrentUser(null);\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  const getUserDisplayName = (user: User) => {\n    return user.name || user.email.split('@')[0];\n  };\n\n  const getUserInitials = (user: User) => {\n    const name = getUserDisplayName(user);\n    return name.slice(0, 2).toUpperCase();\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (location.trim()) {\n      onSearch(location.trim());\n      console.log(\"Search triggered for:\", location);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      console.log(\"Geolocation is not supported by this browser\");\n      return;\n    }\n\n    setIsGettingLocation(true);\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        try {\n          const { latitude, longitude } = position.coords;\n          // Using a reverse geocoding service would be ideal here\n          // For now, we'll simulate getting a location name\n          const locationName = `${latitude.toFixed(2)}, ${longitude.toFixed(2)}`;\n          setLocation(locationName);\n          onSearch(locationName);\n          console.log(\"Location detected:\", { latitude, longitude });\n        } catch (error) {\n          console.error(\"Error getting location name:\", error);\n        } finally {\n          setIsGettingLocation(false);\n        }\n      },\n      (error) => {\n        console.error(\"Error getting location:\", error);\n        setIsGettingLocation(false);\n      }\n    );\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-background/95 backdrop-blur-md border-b border-border/40 shadow-sm\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center gap-3 hover-elevate rounded-lg p-2 -m-2 transition-all\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-primary/80 rounded-xl flex items-center justify-center shadow-lg shadow-primary/20\">\n              <span className=\"text-primary-foreground font-bold text-lg\">🏌️</span>\n            </div>\n            <h1 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent hidden sm:block\" data-testid=\"text-logo\">\n              FairwayPro\n            </h1>\n          </Link>\n\n          {/* Enhanced Search Bar */}\n          <div className=\"flex-1 max-w-2xl mx-8 hidden md:block\">\n            <form onSubmit={handleSearch} data-testid=\"form-search\">\n              <div className=\"flex items-center bg-background border border-border/60 rounded-full shadow-lg hover:shadow-xl hover:border-primary/30 transition-all duration-300 backdrop-blur-sm\">\n                {/* Location Input */}\n                <div className=\"flex-1 px-6 py-4\">\n                  <label className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                    Find Golf Coaches\n                  </label>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Enter city, state, or zip code\"\n                      value={location}\n                      onChange={(e) => setLocation(e.target.value)}\n                      className=\"border-0 p-0 text-sm font-medium focus-visible:ring-0 bg-transparent placeholder:text-muted-foreground/60\"\n                      data-testid=\"input-location\"\n                    />\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex items-center gap-1 pr-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={getCurrentLocation}\n                    disabled={isGettingLocation}\n                    className=\"rounded-full w-10 h-10 p-0 hover:bg-muted/50 transition-colors\"\n                    data-testid=\"button-current-location\"\n                  >\n                    <Crosshair className={`w-4 h-4 ${isGettingLocation ? 'animate-spin text-primary' : 'text-muted-foreground'}`} />\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    size=\"sm\"\n                    className=\"rounded-full bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-primary-foreground w-12 h-12 shadow-lg shadow-primary/25 hover:shadow-xl hover:shadow-primary/30 transition-all duration-200\"\n                    data-testid=\"button-search\"\n                  >\n                    <Search className=\"w-5 h-5\" />\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </div>\n\n          {/* Mobile Search - Enhanced */}\n          <div className=\"flex-1 mx-4 md:hidden\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full justify-start text-muted-foreground border-border/60 bg-background/50 backdrop-blur-sm hover:bg-muted/50 hover:border-primary/30 transition-all duration-200\"\n              onClick={() => (document.querySelector('[data-testid=\"input-location\"]') as HTMLInputElement)?.focus()}\n            >\n              <Search className=\"w-4 h-4 mr-2 text-primary/70\" />\n              <span className=\"truncate\">Find golf coaches...</span>\n            </Button>\n          </div>\n\n          {/* Auth Buttons / Profile Menu */}\n          <div className=\"flex items-center gap-2\">\n            {isLoadingAuth ? (\n              // Loading state\n              <Button variant=\"ghost\" disabled className=\"hidden sm:flex\">\n                Loading...\n              </Button>\n            ) : currentUser ? (\n              // Logged in - show enhanced profile menu\n              <>\n                {/* Desktop Profile Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button \n                      variant=\"ghost\" \n                      className=\"hidden sm:flex items-center gap-3 hover-elevate px-3 py-2 rounded-full border border-border/60 bg-background/50 backdrop-blur-sm hover:bg-muted/50 hover:border-primary/30 transition-all duration-200\"\n                      data-testid=\"button-profile-menu\"\n                    >\n                      <Avatar className=\"w-8 h-8 ring-2 ring-primary/20\">\n                        <AvatarFallback className=\"bg-gradient-to-br from-primary to-primary/80 text-primary-foreground text-sm font-semibold\">\n                          {getUserInitials(currentUser)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"font-medium text-sm\">{getUserDisplayName(currentUser)}</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\" className=\"flex items-center gap-2 w-full\" data-testid=\"link-profile\">\n                        <UserCircle className=\"w-4 h-4\" />\n                        Profile\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/my-bookings\" className=\"flex items-center gap-2 w-full\" data-testid=\"link-my-bookings\">\n                        <Calendar className=\"w-4 h-4\" />\n                        My Bookings\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/inbox\" className=\"flex items-center gap-2 w-full\" data-testid=\"link-inbox\">\n                        <MessageCircle className=\"w-4 h-4\" />\n                        Inbox\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleSignOut} data-testid=\"button-signout\">\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Sign Out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n\n                {/* Mobile Profile Menu */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"sm:hidden rounded-full w-10 h-10 p-0 hover-elevate border border-border/60 bg-background/50 backdrop-blur-sm hover:bg-muted/50 hover:border-primary/30 transition-all duration-200\"\n                      data-testid=\"button-profile-menu-mobile\"\n                    >\n                      <Avatar className=\"w-8 h-8 ring-2 ring-primary/20\">\n                        <AvatarFallback className=\"bg-gradient-to-br from-primary to-primary/80 text-primary-foreground text-sm font-semibold\">\n                          {getUserInitials(currentUser)}\n                        </AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <div className=\"px-2 py-1.5 text-sm font-medium\">\n                      {getUserDisplayName(currentUser)}\n                    </div>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\" className=\"flex items-center gap-2 w-full\">\n                        <UserCircle className=\"w-4 h-4\" />\n                        Profile\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/my-bookings\" className=\"flex items-center gap-2 w-full\">\n                        <Calendar className=\"w-4 h-4\" />\n                        My Bookings\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/inbox\" className=\"flex items-center gap-2 w-full\">\n                        <MessageCircle className=\"w-4 h-4\" />\n                        Inbox\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleSignOut}>\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Sign Out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              // Not logged in - show enhanced login/signup buttons\n              <>\n                <Button \n                  variant=\"ghost\" \n                  onClick={onAuthClick}\n                  className=\"hidden sm:flex font-medium hover-elevate transition-all duration-200\"\n                  data-testid=\"button-login\"\n                >\n                  Log in\n                </Button>\n                <Button \n                  onClick={onAuthClick}\n                  className=\"hidden sm:flex bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-primary-foreground shadow-lg shadow-primary/25 hover:shadow-xl hover:shadow-primary/30 transition-all duration-200\"\n                  data-testid=\"button-signup\"\n                >\n                  Sign up\n                </Button>\n                <Link href=\"/coach-registration\">\n                  <Button \n                    variant=\"outline\"\n                    className=\"rounded-full border-border/60 bg-background/50 backdrop-blur-sm hover:bg-muted/50 hover:border-primary/30 transition-all duration-200\"\n                    data-testid=\"button-coach-signup\"\n                  >\n                    <span className=\"hidden sm:inline font-medium\">Become a coach</span>\n                    <span className=\"sm:hidden font-medium\">Coach</span>\n                  </Button>\n                </Link>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onAuthClick}\n                  className=\"sm:hidden rounded-full w-10 h-10 p-0 border border-border/60 bg-background/50 backdrop-blur-sm hover:bg-muted/50 hover:border-primary/30 transition-all duration-200\"\n                  data-testid=\"button-menu-mobile\"\n                >\n                  <User className=\"w-4 h-4 text-primary/70\" />\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":14493},"client/src/components/HeroSection.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, MapPin } from \"lucide-react\";\nimport heroImage from \"@assets/generated_images/Golf_course_hero_image_c61a461c.png\";\n\ninterface HeroSectionProps {\n  onSearch: (location: string) => void;\n}\n\nexport default function HeroSection({ onSearch }: HeroSectionProps) {\n  const [location, setLocation] = useState(\"\");\n\n  const handleSearch = () => {\n    if (location.trim()) {\n      onSearch(location.trim());\n      console.log(\"Hero search triggered:\", { location });\n    }\n  };\n\n  return (\n    <section className=\"relative mt-8\">\n      {/* Hero Image with Overlay */}\n      <div \n        className=\"relative h-96 bg-cover bg-center rounded-lg mx-4\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.2)), url(${heroImage})`\n        }}\n      >\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center text-white px-4 max-w-4xl\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"text-hero-title\">\n              Find Your Perfect Golf Pro\n            </h2>\n            <p className=\"text-lg md:text-xl mb-8 opacity-90\" data-testid=\"text-hero-subtitle\">\n              Connect with PGA certified instructors in your area. Browse profiles, read reviews, and book lessons online.\n            </p>\n            \n            {/* Search Form */}\n            <div className=\"bg-white/95 backdrop-blur-sm rounded-lg p-6 max-w-xl mx-auto\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"flex-1 relative\">\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter city, zip code, or address...\"\n                    value={location}\n                    onChange={(e) => setLocation(e.target.value)}\n                    className=\"pl-10 h-12\"\n                    data-testid=\"input-hero-location\"\n                  />\n                </div>\n                \n                <Button \n                  onClick={handleSearch} \n                  className=\"h-12 px-8\"\n                  data-testid=\"button-hero-search\"\n                >\n                  <Search className=\"w-4 h-4 mr-2\" />\n                  Find Coaches\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":2606},"client/src/components/SearchFilters.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Filter, X } from \"lucide-react\";\n\nexport interface FilterState {\n  priceRange: [number, number];\n  rating: string;\n  specialties: string[];\n  availability: string;\n  experience: string;\n  sortBy: string;\n}\n\ninterface SearchFiltersProps {\n  filters: FilterState;\n  onFiltersChange: (filters: FilterState) => void;\n  onClearFilters: () => void;\n  isVisible: boolean;\n  onToggle: () => void;\n}\n\nexport default function SearchFilters({ \n  filters, \n  onFiltersChange, \n  onClearFilters, \n  isVisible, \n  onToggle \n}: SearchFiltersProps) {\n  const specialtyOptions = [\n    'Swing Analysis',\n    'Putting',\n    'Short Game',\n    'Course Strategy',\n    'Mental Game',\n    'Junior Programs',\n    'Senior Lessons',\n    'Tournament Prep'\n  ];\n\n  const handleSpecialtyChange = (specialty: string, checked: boolean) => {\n    const newSpecialties = checked \n      ? [...filters.specialties, specialty]\n      : filters.specialties.filter(s => s !== specialty);\n    \n    onFiltersChange({ ...filters, specialties: newSpecialties });\n  };\n\n  const handlePriceRangeChange = (value: number[]) => {\n    onFiltersChange({ ...filters, priceRange: [value[0], value[1]] });\n  };\n\n  return (\n    <>\n      {/* Mobile Filter Toggle */}\n      <div className=\"lg:hidden mb-4\">\n        <Button \n          variant=\"outline\" \n          onClick={onToggle}\n          className=\"w-full\"\n          data-testid=\"button-toggle-filters\"\n        >\n          <Filter className=\"w-4 h-4 mr-2\" />\n          {isVisible ? 'Hide Filters' : 'Show Filters'}\n        </Button>\n      </div>\n\n      {/* Filters Panel */}\n      <Card className={`${isVisible ? 'block' : 'hidden'} lg:block sticky top-24`}>\n        <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n          <CardTitle className=\"text-lg\">Filters</CardTitle>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={onClearFilters}\n            data-testid=\"button-clear-filters\"\n          >\n            <X className=\"w-4 h-4 mr-1\" />\n            Clear\n          </Button>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          {/* Sort By */}\n          <div>\n            <Label className=\"text-sm font-medium mb-2 block\">Sort By</Label>\n            <Select \n              value={filters.sortBy} \n              onValueChange={(value) => onFiltersChange({ ...filters, sortBy: value })}\n            >\n              <SelectTrigger data-testid=\"select-sort-by\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"distance\">Distance</SelectItem>\n                <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                <SelectItem value=\"price_low\">Price: Low to High</SelectItem>\n                <SelectItem value=\"price_high\">Price: High to Low</SelectItem>\n                <SelectItem value=\"reviews\">Most Reviews</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Price Range */}\n          <div>\n            <Label className=\"text-sm font-medium mb-3 block\">\n              Price Range: ${filters.priceRange[0]} - ${filters.priceRange[1]} per hour\n            </Label>\n            <Slider\n              value={filters.priceRange}\n              onValueChange={handlePriceRangeChange}\n              max={200}\n              min={25}\n              step={5}\n              className=\"w-full\"\n              data-testid=\"slider-price-range\"\n            />\n          </div>\n\n          {/* Minimum Rating */}\n          <div>\n            <Label className=\"text-sm font-medium mb-2 block\">Minimum Rating</Label>\n            <Select \n              value={filters.rating} \n              onValueChange={(value) => onFiltersChange({ ...filters, rating: value })}\n            >\n              <SelectTrigger data-testid=\"select-min-rating\">\n                <SelectValue placeholder=\"Any rating\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"any\">Any rating</SelectItem>\n                <SelectItem value=\"4\">4+ stars</SelectItem>\n                <SelectItem value=\"4.5\">4.5+ stars</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Experience Level */}\n          <div>\n            <Label className=\"text-sm font-medium mb-2 block\">Experience</Label>\n            <Select \n              value={filters.experience} \n              onValueChange={(value) => onFiltersChange({ ...filters, experience: value })}\n            >\n              <SelectTrigger data-testid=\"select-experience\">\n                <SelectValue placeholder=\"Any experience\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"any\">Any experience</SelectItem>\n                <SelectItem value=\"5+\">5+ years</SelectItem>\n                <SelectItem value=\"10+\">10+ years</SelectItem>\n                <SelectItem value=\"15+\">15+ years</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Availability */}\n          <div>\n            <Label className=\"text-sm font-medium mb-2 block\">Availability</Label>\n            <Select \n              value={filters.availability} \n              onValueChange={(value) => onFiltersChange({ ...filters, availability: value })}\n            >\n              <SelectTrigger data-testid=\"select-availability\">\n                <SelectValue placeholder=\"Any time\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"any\">Any time</SelectItem>\n                <SelectItem value=\"today\">Available today</SelectItem>\n                <SelectItem value=\"week\">This week</SelectItem>\n                <SelectItem value=\"weekend\">Weekends</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Specialties */}\n          <div>\n            <Label className=\"text-sm font-medium mb-3 block\">Specialties</Label>\n            <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n              {specialtyOptions.map((specialty) => (\n                <div key={specialty} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={specialty}\n                    checked={filters.specialties.includes(specialty)}\n                    onCheckedChange={(checked) => handleSpecialtyChange(specialty, checked as boolean)}\n                    data-testid={`checkbox-specialty-${specialty.toLowerCase().replace(/\\s+/g, '-')}`}\n                  />\n                  <Label htmlFor={specialty} className=\"text-sm font-normal\">\n                    {specialty}\n                  </Label>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}","size_bytes":7288},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport AuthModal from '../AuthModal';\nimport { Button } from \"@/components/ui/button\";\n\nexport default function AuthModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleAuth = (type: 'login' | 'signup', data: any) => {\n    console.log(`${type} attempt:`, data);\n    setIsOpen(false);\n  };\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>\n        Open Auth Modal\n      </Button>\n      <AuthModal \n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        onAuth={handleAuth}\n      />\n    </div>\n  );\n}","size_bytes":595},"client/src/components/examples/BookingModal.tsx":{"content":"import { useState } from \"react\";\nimport BookingModal, { BookingData } from '../BookingModal';\nimport { Coach } from '../CoachCard';\nimport { Button } from \"@/components/ui/button\";\nimport maleCoachImage from '@assets/generated_images/Male_golf_coach_headshot_893584c9.png';\n\nexport default function BookingModalExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // TODO: remove mock functionality\n  const mockCoach: Coach = {\n    id: '1',\n    name: 'Michael Johnson',\n    image: maleCoachImage,\n    rating: 4.8,\n    reviewCount: 127,\n    distance: '2.3 miles',\n    pricePerHour: 85,\n    bio: 'PGA Professional with 15+ years of experience teaching golfers of all skill levels.',\n    specialties: ['Swing Analysis', 'Putting', 'Course Strategy'],\n    location: 'Pine Valley Golf Club',\n    responseTime: '2 hours',\n    availability: 'Available this week',\n    tools: ['TrackMan', 'Video Analysis', 'Launch Monitor'],\n    certifications: ['PGA Class A Professional', 'TPI Certified'],\n    yearsExperience: 15\n  };\n\n  const handleBook = (bookingData: BookingData) => {\n    console.log('Booking confirmed:', bookingData);\n    setIsOpen(false);\n  };\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>\n        Open Booking Modal\n      </Button>\n      <BookingModal \n        coach={mockCoach}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        onBook={handleBook}\n      />\n    </div>\n  );\n}","size_bytes":1435},"client/src/components/examples/CoachCard.tsx":{"content":"import CoachCard, { Coach } from '../CoachCard';\nimport maleCoachImage from '@assets/generated_images/Male_golf_coach_headshot_893584c9.png';\n\nexport default function CoachCardExample() {\n  // TODO: remove mock functionality\n  const mockCoach: Coach = {\n    id: '1',\n    name: 'Michael Johnson',\n    image: maleCoachImage,\n    rating: 4.8,\n    reviewCount: 127,\n    distance: '2.3 miles',\n    pricePerHour: 85,\n    bio: 'PGA Professional with 15+ years of experience teaching golfers of all skill levels. Specializing in swing mechanics and course management.',\n    specialties: ['Swing Analysis', 'Putting', 'Course Strategy', 'Mental Game'],\n    location: 'Pine Valley Golf Club',\n    responseTime: '2 hours',\n    availability: 'Available this week',\n    tools: ['TrackMan', 'Video Analysis', 'Launch Monitor', 'Putting Mat'],\n    certifications: ['PGA Class A Professional', 'TPI Certified'],\n    yearsExperience: 15,\n    videos: [\n      {\n        id: '1',\n        title: 'Swing Fundamentals',\n        thumbnail: maleCoachImage,\n        duration: '3:45',\n        description: 'Basic swing mechanics explained'\n      }\n    ]\n  };\n\n  const handleViewProfile = (coach: Coach) => {\n    console.log('View profile:', coach.name);\n  };\n\n  const handleBookLesson = (coach: Coach) => {\n    console.log('Book lesson with:', coach.name);\n  };\n\n  return (\n    <div className=\"max-w-2xl\">\n      <CoachCard \n        coach={mockCoach}\n        onViewProfile={handleViewProfile}\n        onBookLesson={handleBookLesson}\n      />\n    </div>\n  );\n}","size_bytes":1531},"client/src/components/examples/CoachList.tsx":{"content":"import CoachList from '../CoachList';\nimport { Coach } from '../CoachCard';\nimport maleCoachImage from '@assets/generated_images/Male_golf_coach_headshot_893584c9.png';\nimport femaleCoachImage from '@assets/generated_images/Female_golf_coach_headshot_05d9fb5a.png';\nimport seniorCoachImage from '@assets/generated_images/Senior_golf_coach_headshot_d3798356.png';\n\nexport default function CoachListExample() {\n  // TODO: remove mock functionality\n  const mockCoaches: Coach[] = [\n    {\n      id: '1',\n      name: 'Michael Johnson',\n      image: maleCoachImage,\n      rating: 4.8,\n      reviewCount: 127,\n      distance: '2.3 miles',\n      pricePerHour: 85,\n      bio: 'PGA Professional with 15+ years of experience teaching golfers of all skill levels.',\n      specialties: ['Swing Analysis', 'Putting', 'Course Strategy'],\n      location: 'Pine Valley Golf Club',\n      responseTime: '2 hours',\n      availability: 'Available this week',\n      tools: ['TrackMan', 'Video Analysis', 'Launch Monitor'],\n      certifications: ['PGA Class A Professional'],\n      yearsExperience: 15\n    },\n    {\n      id: '2',\n      name: 'Sarah Williams',\n      image: femaleCoachImage,\n      rating: 4.9,\n      reviewCount: 89,\n      distance: '3.7 miles',\n      pricePerHour: 95,\n      bio: 'LPGA Teaching Professional specializing in junior development and women\\'s golf.',\n      specialties: ['Junior Programs', 'Short Game', 'Mental Game'],\n      location: 'Oakwood Country Club',\n      responseTime: '1 hour',\n      availability: 'Available today',\n      tools: ['FlightScope', 'OnForm App', 'Training Aids'],\n      certifications: ['LPGA Class A Professional'],\n      yearsExperience: 12\n    },\n    {\n      id: '3',\n      name: 'Robert Chen',\n      image: seniorCoachImage,\n      rating: 4.7,\n      reviewCount: 203,\n      distance: '5.1 miles',\n      pricePerHour: 120,\n      bio: 'Former PGA Tour player with 25+ years of teaching experience.',\n      specialties: ['Tournament Prep', 'Advanced Techniques', 'Course Management'],\n      location: 'Championship Links',\n      responseTime: '3 hours',\n      availability: 'Available next week',\n      tools: ['GC Quad', 'K-Coach', 'BodiTrak'],\n      certifications: ['Former PGA Tour Player'],\n      yearsExperience: 25\n    }\n  ];\n\n  const handleViewProfile = (coach: Coach) => {\n    console.log('View profile:', coach.name);\n  };\n\n  const handleBookLesson = (coach: Coach) => {\n    console.log('Book lesson with:', coach.name);\n  };\n\n  const handleLoadMore = () => {\n    console.log('Load more coaches');\n  };\n\n  return (\n    <div className=\"max-w-4xl\">\n      <CoachList \n        coaches={mockCoaches}\n        isLoading={false}\n        onLoadMore={handleLoadMore}\n        hasMore={true}\n        onViewProfile={handleViewProfile}\n        onBookLesson={handleBookLesson}\n      />\n    </div>\n  );\n}","size_bytes":2832},"client/src/components/examples/CoachProfile.tsx":{"content":"import { useState } from \"react\";\nimport CoachProfile from '../CoachProfile';\nimport { Coach } from '../CoachCard';\nimport { Button } from \"@/components/ui/button\";\nimport maleCoachImage from '@assets/generated_images/Male_golf_coach_headshot_893584c9.png';\n\nexport default function CoachProfileExample() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  // TODO: remove mock functionality\n  const mockCoach: Coach = {\n    id: '1',\n    name: 'Michael Johnson',\n    image: maleCoachImage,\n    rating: 4.8,\n    reviewCount: 127,\n    distance: '2.3 miles',\n    pricePerHour: 85,\n    bio: 'PGA Professional with over 15 years of experience teaching golfers of all skill levels. I specialize in helping students develop proper fundamentals while building confidence on the course. My teaching philosophy focuses on creating a relaxed learning environment where students can improve at their own pace. I have experience working with juniors, adults, and seniors, and I enjoy tailoring my approach to meet each student\\'s unique goals and learning style.',\n    specialties: ['Swing Analysis', 'Putting', 'Course Strategy', 'Mental Game', 'Junior Programs'],\n    location: 'Pine Valley Golf Club',\n    responseTime: '2 hours',\n    availability: 'Available this week',\n    tools: ['TrackMan 4', 'V1 Video Analysis', 'SAM PuttLab', 'BodiTrak', 'FlightScope Launch Monitor'],\n    certifications: ['PGA Class A Professional', 'TPI Certified Level 3', 'Trackman University Certified', 'US Kids Golf Certified'],\n    yearsExperience: 15,\n    videos: [\n      {\n        id: '1',\n        title: 'Perfect Your Swing Plane',\n        thumbnail: maleCoachImage,\n        duration: '4:23',\n        description: 'Learn the fundamentals of proper swing plane with detailed analysis'\n      },\n      {\n        id: '2',\n        title: 'Putting Fundamentals',\n        thumbnail: maleCoachImage,\n        duration: '3:15',\n        description: 'Master the basics of putting setup and stroke'\n      },\n      {\n        id: '3',\n        title: 'Short Game Secrets',\n        thumbnail: maleCoachImage,\n        duration: '5:47',\n        description: 'Improve your chipping and pitching around the green'\n      }\n    ]\n  };\n\n  const handleBookLesson = (coach: Coach) => {\n    console.log('Book lesson with:', coach.name);\n    setIsOpen(false);\n  };\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>\n        Open Coach Profile\n      </Button>\n      <CoachProfile \n        coach={mockCoach}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        onBookLesson={handleBookLesson}\n      />\n    </div>\n  );\n}","size_bytes":2604},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\n\nexport default function HeaderExample() {\n  const handleSearch = (location: string) => {\n    console.log('Search for location:', location);\n  };\n\n  const handleAuthClick = () => {\n    console.log('Auth clicked');\n  };\n\n  return (\n    <Header \n      onSearch={handleSearch} \n      onAuthClick={handleAuthClick} \n    />\n  );\n}","size_bytes":357},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  const handleSearch = (location: string) => {\n    console.log('Hero search:', { location });\n  };\n\n  return <HeroSection onSearch={handleSearch} />;\n}","size_bytes":241},"client/src/components/examples/SearchFilters.tsx":{"content":"import { useState } from \"react\";\nimport SearchFilters, { FilterState } from '../SearchFilters';\n\nexport default function SearchFiltersExample() {\n  // TODO: remove mock functionality\n  const [filters, setFilters] = useState<FilterState>({\n    priceRange: [50, 150],\n    rating: 'any',\n    specialties: ['Swing Analysis'],\n    availability: 'any',\n    experience: 'any',\n    sortBy: 'distance'\n  });\n  const [isVisible, setIsVisible] = useState(true);\n\n  const handleFiltersChange = (newFilters: FilterState) => {\n    setFilters(newFilters);\n    console.log('Filters changed:', newFilters);\n  };\n\n  const handleClearFilters = () => {\n    const clearedFilters: FilterState = {\n      priceRange: [25, 200],\n      rating: 'any',\n      specialties: [],\n      availability: 'any',\n      experience: 'any',\n      sortBy: 'distance'\n    };\n    setFilters(clearedFilters);\n    console.log('Filters cleared');\n  };\n\n  const handleToggle = () => {\n    setIsVisible(!isVisible);\n  };\n\n  return (\n    <div className=\"max-w-sm\">\n      <SearchFilters \n        filters={filters}\n        onFiltersChange={handleFiltersChange}\n        onClearFilters={handleClearFilters}\n        isVisible={isVisible}\n        onToggle={handleToggle}\n      />\n    </div>\n  );\n}","size_bytes":1242},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# PGA Golf Coach Platform\n\n## Overview\n\nThis is a marketplace platform connecting golfers with PGA certified instructors, similar to Airbnb but for golf lessons. The platform allows students to search for coaches based on location, read profiles and reviews, and book lessons directly. Coaches can register profiles showcasing their expertise, certifications, and teaching tools.\n\nThe application features a modern React frontend with a Node.js/Express backend, using PostgreSQL with Drizzle ORM for data persistence. The design follows a mobile-first approach inspired by Airbnb's marketplace patterns.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent UI patterns\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database ORM**: Drizzle ORM with PostgreSQL as the database\n- **Authentication**: Express sessions with bcrypt for password hashing\n- **API Design**: RESTful API architecture with JSON responses\n\n### Database Schema Design\nThe system uses a multi-table approach to separate concerns:\n- **Users table**: Base authentication for both students and coaches\n- **Students/Coaches tables**: Role-specific profile information\n- **Bookings table**: Lesson scheduling and management\n- **Reviews table**: Rating and feedback system\n- **Supporting tables**: Coach specialties, tools, certifications, and videos\n\n### Component Architecture\n- **Modular Components**: Reusable UI components following atomic design principles\n- **Modal System**: Centralized modal management for auth, booking, and profile viewing\n- **Search & Filter System**: Advanced filtering capabilities for coach discovery\n- **Card-based Layout**: Coach profiles displayed in responsive card grids\n\n### Authentication System\n- Session-based authentication with secure password hashing\n- Role-based access control (student vs coach)\n- Registration flow with email validation\n\n### File Structure\n- **`client/`**: Frontend React application with component-based architecture\n- **`server/`**: Backend API routes and business logic\n- **`shared/`**: Common TypeScript types and database schema\n- **Component organization**: UI components, examples, and reusable elements\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Serverless PostgreSQL database provider\n- **Connection**: Uses connection pooling with `@neondatabase/serverless`\n\n### UI and Styling\n- **Radix UI**: Headless UI primitives for accessible components\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built component library built on Radix UI\n\n### Third-party Services\n- **SendGrid**: Email delivery service for notifications\n- **Stripe**: Payment processing for lesson bookings (configured but not fully implemented)\n- **Google Fonts**: Web fonts (Inter, DM Sans, Architects Daughter, Fira Code, Geist Mono)\n\n### Development Tools\n- **Vite**: Frontend build tool with hot module replacement\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Drizzle Kit**: Database migration and schema management tools\n\n### Form and Validation\n- **React Hook Form**: Form state management\n- **Zod**: Runtime type validation and schema validation\n- **@hookform/resolvers**: Integration between React Hook Form and Zod\n\n### State Management\n- **TanStack Query**: Server state management with caching\n- **React Context**: Local component state management\n\nThe platform is designed to be easily deployable on Replit with automatic database provisioning and environment variable management.","size_bytes":3983},"client/src/pages/coach-registration.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { X, Plus, Upload, MapPin, DollarSign, Award, Camera, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { UploadResult } from \"@uppy/core\";\n\n// Validation schema for coach registration\nconst coachRegistrationSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  bio: z.string().min(50, \"Bio must be at least 50 characters\").max(500, \"Bio must be less than 500 characters\"),\n  location: z.string().min(3, \"Location is required\"),\n  pricePerHour: z.coerce.number().min(25, \"Minimum price is $25\").max(500, \"Maximum price is $500\"),\n  yearsExperience: z.coerce.number().min(1, \"At least 1 year of experience required\").max(50, \"Maximum 50 years\"),\n  pgaCertificationId: z.string().min(3, \"PGA certification/ID is required\").max(50, \"PGA certification/ID must be less than 50 characters\"),\n  responseTime: z.string().min(1, \"Response time is required\"),\n  availability: z.string().min(1, \"Availability is required\"),\n  googleReviewsUrl: z.string().url(\"Please enter a valid Google Reviews URL\").optional().or(z.literal(\"\")),\n  image: z.string().optional(),\n  latitude: z.coerce.number().optional(),\n  longitude: z.coerce.number().optional(),\n});\n\ntype CoachRegistrationForm = z.infer<typeof coachRegistrationSchema>;\n\n// Predefined options\nconst GOLF_SPECIALTIES = [\n  \"Swing Analysis\", \"Putting\", \"Short Game\", \"Course Strategy\", \"Mental Game\",\n  \"Beginner Instruction\", \"Advanced Techniques\", \"Junior Programs\", \n  \"Tournament Prep\", \"Fitness Training\", \"Injury Prevention\", \"Golf Etiquette\"\n];\n\nconst GOLF_TOOLS = [\n  \"TrackMan 4\", \"FlightScope X3\", \"GC Quad Launch Monitor\", \"Foresight Sports\",\n  \"V1 Video Analysis\", \"OnForm Video App\", \"K-Coach Video Analysis\", \"3D Motion Capture\",\n  \"SAM PuttLab\", \"BodiTrak Pressure Mat\", \"TPI Screen Tools\", \"K-Vest 3D Analysis\",\n  \"Mirror Training Aid\", \"Alignment Sticks\", \"Impact Bag\", \"SKLZ Training Aids\",\n  \"Resistance Bands\", \"Basic Video Setup\"\n];\n\nconst CERTIFICATIONS = [\n  \"PGA Class A Professional\", \"LPGA Class A Professional\", \"TPI Certified Level 1\",\n  \"TPI Certified Level 2\", \"TPI Certified Level 3\", \"PGA Junior Certified\",\n  \"Get Golf Ready Instructor\", \"NASM Certified Trainer\", \"Former PGA Tour Player\",\n  \"Former LPGA Tour Player\", \"Master Professional\", \"Teaching Professional\"\n];\n\nconst RESPONSE_TIMES = [\n  \"Within 1 hour\", \"Within 2 hours\", \"Within 3 hours\", \"Within 4 hours\",\n  \"Same day\", \"Within 24 hours\", \"Within 48 hours\"\n];\n\nconst AVAILABILITY_OPTIONS = [\n  \"Available today\", \"Available this week\", \"Available next week\", \n  \"Available weekdays\", \"Available weekends\", \"Available evenings\",\n  \"By appointment only\"\n];\n\nexport default function CoachRegistration() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [currentTab, setCurrentTab] = useState(\"profile\");\n  const [selectedSpecialties, setSelectedSpecialties] = useState<string[]>([]);\n  const [selectedTools, setSelectedTools] = useState<string[]>([]);\n  const [selectedCertifications, setSelectedCertifications] = useState<string[]>([]);\n  const [videos, setVideos] = useState<Array<{\n    title: string;\n    description: string;\n    thumbnail: string;\n    duration: string;\n    videoUrl: string;\n    isUploadingVideo: boolean;\n    isUploadingThumbnail: boolean;\n  }>>([]);\n  const [profileImageUrl, setProfileImageUrl] = useState<string>(\"\");\n  const [isUploadingImage, setIsUploadingImage] = useState(false);\n\n  const form = useForm<CoachRegistrationForm>({\n    resolver: zodResolver(coachRegistrationSchema),\n    defaultValues: {\n      name: \"\",\n      bio: \"\",\n      location: \"\",\n      pricePerHour: 75,\n      yearsExperience: 5,\n      pgaCertificationId: \"\",\n      responseTime: \"Within 24 hours\",\n      availability: \"Available this week\",\n      googleReviewsUrl: \"\",\n      image: profileImageUrl,\n      latitude: undefined,\n      longitude: undefined,\n    },\n  });\n\n  // Coach registration mutation\n  const registerCoachMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/coaches/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Registration failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Registration Submitted!\",\n        description: data.message || \"Your coach profile is pending admin approval. You will be notified once approved.\",\n        duration: 5000,\n      });\n      setLocation('/');\n      queryClient.invalidateQueries({ queryKey: ['/api/coaches/search'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (data: CoachRegistrationForm) => {\n    const completeData = {\n      ...data,\n      specialties: selectedSpecialties,\n      tools: selectedTools,\n      certifications: selectedCertifications,\n      videos: videos,\n    };\n\n    registerCoachMutation.mutate(completeData);\n  };\n\n  const addSpecialty = (specialty: string) => {\n    if (!selectedSpecialties.includes(specialty)) {\n      setSelectedSpecialties([...selectedSpecialties, specialty]);\n    }\n  };\n\n  const removeSpecialty = (specialty: string) => {\n    setSelectedSpecialties(selectedSpecialties.filter(s => s !== specialty));\n  };\n\n  const addTool = (tool: string) => {\n    if (!selectedTools.includes(tool)) {\n      setSelectedTools([...selectedTools, tool]);\n    }\n  };\n\n  const removeTool = (tool: string) => {\n    setSelectedTools(selectedTools.filter(t => t !== tool));\n  };\n\n  const addCertification = (certification: string) => {\n    if (!selectedCertifications.includes(certification)) {\n      setSelectedCertifications([...selectedCertifications, certification]);\n    }\n  };\n\n  const removeCertification = (certification: string) => {\n    setSelectedCertifications(selectedCertifications.filter(c => c !== certification));\n  };\n\n  const addVideo = () => {\n    setVideos([...videos, {\n      title: \"\",\n      description: \"\",\n      thumbnail: \"\",\n      duration: \"0:00\",\n      videoUrl: \"\",\n      isUploadingVideo: false,\n      isUploadingThumbnail: false\n    }]);\n  };\n\n  const removeVideo = (index: number) => {\n    setVideos(videos.filter((_, i) => i !== index));\n  };\n\n  const updateVideo = (index: number, field: string, value: string) => {\n    const updatedVideos = videos.map((video, i) => \n      i === index ? { ...video, [field]: value } : video\n    );\n    setVideos(updatedVideos);\n  };\n\n  // Handle profile image upload\n  const handleGetUploadParameters = async () => {\n    const response = await fetch('/api/objects/upload', {\n      method: 'POST',\n      credentials: 'include',\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to get upload URL');\n    }\n    \n    const { uploadURL } = await response.json();\n    return {\n      method: 'PUT' as const,\n      url: uploadURL,\n    };\n  };\n\n  const handleImageUploadComplete = async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    setIsUploadingImage(false);\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadUrl = uploadedFile.uploadURL;\n      \n      if (uploadUrl) {\n        try {\n          // Normalize the upload URL to a proper object path and set ACL\n          const response = await fetch('/api/objects/normalize-profile-image', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({ imageURL: uploadUrl })\n          });\n          \n          if (response.ok) {\n            const { objectPath } = await response.json();\n            setProfileImageUrl(objectPath);\n            form.setValue('image', objectPath);\n            toast({\n              title: \"Profile Image Uploaded\",\n              description: \"Your profile image has been uploaded successfully.\",\n            });\n          } else {\n            throw new Error('Failed to process uploaded image');\n          }\n        } catch (error) {\n          console.error('Error processing uploaded image:', error);\n          toast({\n            title: \"Upload Processing Failed\",\n            description: \"There was an error processing your uploaded image. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    }\n  };\n\n  // Handle video file upload\n  const handleVideoUpload = (videoIndex: number) => async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    const updatedVideos = [...videos];\n    updatedVideos[videoIndex].isUploadingVideo = false;\n    \n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadUrl = uploadedFile.uploadURL;\n      \n      if (uploadUrl) {\n        try {\n          // Normalize the upload URL to a proper object path and set ACL for videos\n          const response = await fetch('/api/objects/normalize-video', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({ videoURL: uploadUrl })\n          });\n          \n          if (response.ok) {\n            const { objectPath } = await response.json();\n            updatedVideos[videoIndex].videoUrl = objectPath;\n            toast({\n              title: \"Video Uploaded\",\n              description: \"Your instructional video has been uploaded successfully.\",\n            });\n          } else {\n            throw new Error('Failed to process uploaded video');\n          }\n        } catch (error) {\n          console.error('Error processing uploaded video:', error);\n          toast({\n            title: \"Video Processing Failed\",\n            description: \"There was an error processing your uploaded video. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    }\n    \n    setVideos(updatedVideos);\n  };\n\n  // Handle thumbnail upload for videos\n  const handleThumbnailUpload = (videoIndex: number) => async (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    const updatedVideos = [...videos];\n    updatedVideos[videoIndex].isUploadingThumbnail = false;\n    \n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      const uploadUrl = uploadedFile.uploadURL;\n      \n      if (uploadUrl) {\n        try {\n          // Normalize the upload URL to a proper object path and set ACL for thumbnails\n          const response = await fetch('/api/objects/normalize-thumbnail', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include',\n            body: JSON.stringify({ thumbnailURL: uploadUrl })\n          });\n          \n          if (response.ok) {\n            const { objectPath } = await response.json();\n            updatedVideos[videoIndex].thumbnail = objectPath;\n            toast({\n              title: \"Thumbnail Uploaded\",\n              description: \"Video thumbnail has been uploaded successfully.\",\n            });\n          } else {\n            throw new Error('Failed to process uploaded thumbnail');\n          }\n        } catch (error) {\n          console.error('Error processing uploaded thumbnail:', error);\n          toast({\n            title: \"Thumbnail Processing Failed\",\n            description: \"There was an error processing your uploaded thumbnail. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    }\n    \n    setVideos(updatedVideos);\n  };\n\n  const startVideoUpload = (index: number) => {\n    const updatedVideos = [...videos];\n    updatedVideos[index].isUploadingVideo = true;\n    setVideos(updatedVideos);\n  };\n\n  const startThumbnailUpload = (index: number) => {\n    const updatedVideos = [...videos];\n    updatedVideos[index].isUploadingThumbnail = true;\n    setVideos(updatedVideos);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background py-8\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">Become a Golf Coach</h1>\n            <p className=\"text-muted-foreground\">\n              Join our platform and start teaching golf students in your area\n            </p>\n          </div>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)}>\n              <Tabs value={currentTab} onValueChange={setCurrentTab} className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n                  <TabsTrigger value=\"expertise\" data-testid=\"tab-expertise\">Expertise</TabsTrigger>\n                  <TabsTrigger value=\"tools\" data-testid=\"tab-tools\">Tools & Certs</TabsTrigger>\n                  <TabsTrigger value=\"content\" data-testid=\"tab-content\">Content</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"profile\" className=\"mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Camera className=\"w-5 h-5\" />\n                        Basic Profile\n                      </CardTitle>\n                      <CardDescription>\n                        Tell students about yourself and your coaching style\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Name *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"John Smith\" {...field} data-testid=\"input-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"bio\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Bio * (50-500 characters)</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Tell potential students about your teaching philosophy, experience, and what makes you unique...\"\n                                className=\"min-h-24\"\n                                {...field}\n                                data-testid=\"textarea-bio\"\n                              />\n                            </FormControl>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {field.value?.length || 0}/500 characters\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"location\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2\">\n                                <MapPin className=\"w-4 h-4\" />\n                                Location *\n                              </FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Pine Valley Golf Club\" {...field} data-testid=\"input-location\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"yearsExperience\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Years Experience *</FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" min=\"1\" max=\"50\" {...field} data-testid=\"input-experience\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"pgaCertificationId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Award className=\"w-4 h-4\" />\n                              PGA Certification/ID *\n                            </FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Enter your PGA certification number or ID\" \n                                {...field} \n                                data-testid=\"input-pga-certification\" \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"pricePerHour\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"flex items-center gap-2\">\n                                <DollarSign className=\"w-4 h-4\" />\n                                Price per Hour *\n                              </FormLabel>\n                              <FormControl>\n                                <Input type=\"number\" min=\"25\" max=\"500\" {...field} data-testid=\"input-price\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"responseTime\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Response Time *</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-response-time\">\n                                    <SelectValue placeholder=\"Select response time\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {RESPONSE_TIMES.map((time) => (\n                                    <SelectItem key={time} value={time}>{time}</SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"availability\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>General Availability *</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-availability\">\n                                  <SelectValue placeholder=\"Select availability\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {AVAILABILITY_OPTIONS.map((availability) => (\n                                  <SelectItem key={availability} value={availability}>{availability}</SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"googleReviewsUrl\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2\">\n                              <Star className=\"w-4 h-4\" />\n                              Google Reviews URL (Optional)\n                            </FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"https://g.page/r/your-business-name/review\" \n                                {...field} \n                                data-testid=\"input-google-reviews-url\"\n                              />\n                            </FormControl>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Link your Google Business profile reviews to show your star rating and attract more students\n                            </div>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Profile Image Upload Section */}\n                      <div className=\"space-y-3\">\n                        <Label className=\"text-base font-medium\">Profile Photo</Label>\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-20 h-20 rounded-full bg-muted flex items-center justify-center overflow-hidden\">\n                            {profileImageUrl ? (\n                              <img \n                                src={profileImageUrl} \n                                alt=\"Profile preview\" \n                                className=\"w-full h-full object-cover\"\n                              />\n                            ) : (\n                              <Camera className=\"w-8 h-8 text-muted-foreground\" />\n                            )}\n                          </div>\n                          <div className=\"flex-1\">\n                            <ObjectUploader\n                              maxNumberOfFiles={1}\n                              maxFileSize={5242880} // 5MB\n                              onGetUploadParameters={handleGetUploadParameters}\n                              onComplete={handleImageUploadComplete}\n                              buttonClassName=\"w-full sm:w-auto\"\n                            >\n                              <Upload className=\"w-4 h-4 mr-2\" />\n                              {profileImageUrl ? 'Change Photo' : 'Upload Photo'}\n                            </ObjectUploader>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              JPG, PNG, GIF up to 5MB. Recommended: 400x400px\n                            </p>\n                            {isUploadingImage && (\n                              <p className=\"text-sm text-primary mt-1\">Uploading...</p>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"expertise\" className=\"mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Award className=\"w-5 h-5\" />\n                        Teaching Specialties\n                      </CardTitle>\n                      <CardDescription>\n                        Select the areas where you excel as a golf instructor\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label className=\"text-base font-medium\">Selected Specialties</Label>\n                          <div className=\"flex flex-wrap gap-2 mt-2 min-h-12\">\n                            {selectedSpecialties.map((specialty) => (\n                              <Badge key={specialty} variant=\"default\" className=\"flex items-center gap-1\">\n                                {specialty}\n                                <X \n                                  className=\"w-3 h-3 cursor-pointer\" \n                                  onClick={() => removeSpecialty(specialty)}\n                                />\n                              </Badge>\n                            ))}\n                            {selectedSpecialties.length === 0 && (\n                              <p className=\"text-sm text-muted-foreground flex items-center\">\n                                No specialties selected yet\n                              </p>\n                            )}\n                          </div>\n                        </div>\n\n                        <div>\n                          <Label className=\"text-sm font-medium\">Available Specialties</Label>\n                          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 mt-2\">\n                            {GOLF_SPECIALTIES.filter(specialty => !selectedSpecialties.includes(specialty))\n                              .map((specialty) => (\n                              <Button\n                                key={specialty}\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => addSpecialty(specialty)}\n                                className=\"justify-start text-left\"\n                                data-testid={`button-add-specialty-${specialty.replace(/\\s+/g, '-').toLowerCase()}`}\n                              >\n                                <Plus className=\"w-3 h-3 mr-1\" />\n                                {specialty}\n                              </Button>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"tools\" className=\"mt-6\">\n                  <div className=\"space-y-6\">\n                    {/* Tools Section */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Teaching Tools & Equipment</CardTitle>\n                        <CardDescription>\n                          What technology and equipment do you use in your lessons?\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label className=\"text-base font-medium\">Selected Tools</Label>\n                            <div className=\"flex flex-wrap gap-2 mt-2 min-h-12\">\n                              {selectedTools.map((tool) => (\n                                <Badge key={tool} variant=\"secondary\" className=\"flex items-center gap-1\">\n                                  {tool}\n                                  <X \n                                    className=\"w-3 h-3 cursor-pointer\" \n                                    onClick={() => removeTool(tool)}\n                                  />\n                                </Badge>\n                              ))}\n                              {selectedTools.length === 0 && (\n                                <p className=\"text-sm text-muted-foreground flex items-center\">\n                                  No tools selected yet\n                                </p>\n                              )}\n                            </div>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-sm font-medium\">Available Tools</Label>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mt-2\">\n                              {GOLF_TOOLS.filter(tool => !selectedTools.includes(tool))\n                                .map((tool) => (\n                                <Button\n                                  key={tool}\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => addTool(tool)}\n                                  className=\"justify-start text-left\"\n                                  data-testid={`button-add-tool-${tool.replace(/\\s+/g, '-').toLowerCase()}`}\n                                >\n                                  <Plus className=\"w-3 h-3 mr-1\" />\n                                  {tool}\n                                </Button>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Certifications Section */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Professional Certifications</CardTitle>\n                        <CardDescription>\n                          List your golf teaching certifications and qualifications\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label className=\"text-base font-medium\">Selected Certifications</Label>\n                            <div className=\"flex flex-wrap gap-2 mt-2 min-h-12\">\n                              {selectedCertifications.map((certification) => (\n                                <Badge key={certification} variant=\"default\" className=\"flex items-center gap-1\">\n                                  {certification}\n                                  <X \n                                    className=\"w-3 h-3 cursor-pointer\" \n                                    onClick={() => removeCertification(certification)}\n                                  />\n                                </Badge>\n                              ))}\n                              {selectedCertifications.length === 0 && (\n                                <p className=\"text-sm text-muted-foreground flex items-center\">\n                                  No certifications selected yet\n                                </p>\n                              )}\n                            </div>\n                          </div>\n\n                          <div>\n                            <Label className=\"text-sm font-medium\">Available Certifications</Label>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mt-2\">\n                              {CERTIFICATIONS.filter(cert => !selectedCertifications.includes(cert))\n                                .map((certification) => (\n                                <Button\n                                  key={certification}\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => addCertification(certification)}\n                                  className=\"justify-start text-left\"\n                                  data-testid={`button-add-certification-${certification.replace(/\\s+/g, '-').toLowerCase()}`}\n                                >\n                                  <Plus className=\"w-3 h-3 mr-1\" />\n                                  {certification}\n                                </Button>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"content\" className=\"mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Upload className=\"w-5 h-5\" />\n                        Instructional Videos\n                      </CardTitle>\n                      <CardDescription>\n                        Upload videos showcasing your teaching methods (optional)\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {videos.map((video, index) => (\n                          <Card key={index}>\n                            <CardContent className=\"pt-4\">\n                              <div className=\"flex items-center justify-between mb-4\">\n                                <h4 className=\"font-medium\">Video {index + 1}</h4>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  onClick={() => removeVideo(index)}\n                                  data-testid={`button-remove-video-${index}`}\n                                >\n                                  <X className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                              \n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <div>\n                                  <Label htmlFor={`video-title-${index}`}>Title</Label>\n                                  <Input\n                                    id={`video-title-${index}`}\n                                    value={video.title}\n                                    onChange={(e) => updateVideo(index, 'title', e.target.value)}\n                                    placeholder=\"e.g., Basic Swing Fundamentals\"\n                                    data-testid={`input-video-title-${index}`}\n                                  />\n                                </div>\n                                \n                                <div>\n                                  <Label htmlFor={`video-duration-${index}`}>Duration</Label>\n                                  <Input\n                                    id={`video-duration-${index}`}\n                                    value={video.duration}\n                                    onChange={(e) => updateVideo(index, 'duration', e.target.value)}\n                                    placeholder=\"e.g., 3:45\"\n                                    data-testid={`input-video-duration-${index}`}\n                                  />\n                                </div>\n                              </div>\n\n                              <div className=\"mt-4\">\n                                <Label htmlFor={`video-description-${index}`}>Description</Label>\n                                <Textarea\n                                  id={`video-description-${index}`}\n                                  value={video.description}\n                                  onChange={(e) => updateVideo(index, 'description', e.target.value)}\n                                  placeholder=\"Describe what students will learn from this video...\"\n                                  data-testid={`textarea-video-description-${index}`}\n                                />\n                              </div>\n\n                              {/* Video File Upload */}\n                              <div className=\"mt-4\">\n                                <Label className=\"text-base font-medium\">Video File</Label>\n                                <div className=\"flex items-center space-x-4 mt-2\">\n                                  <div className=\"flex-1\">\n                                    <ObjectUploader\n                                      maxNumberOfFiles={1}\n                                      maxFileSize={104857600} // 100MB for video files\n                                      onGetUploadParameters={handleGetUploadParameters}\n                                      onComplete={handleVideoUpload(index)}\n                                      buttonClassName=\"w-full\"\n                                    >\n                                      <Upload className=\"w-4 h-4 mr-2\" />\n                                      {video.videoUrl ? 'Change Video' : 'Upload Video'}\n                                    </ObjectUploader>\n                                    {video.isUploadingVideo && (\n                                      <p className=\"text-sm text-primary mt-1\">Uploading video...</p>\n                                    )}\n                                    {video.videoUrl && (\n                                      <p className=\"text-sm text-green-600 mt-1\">Video uploaded successfully</p>\n                                    )}\n                                  </div>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                  MP4, MOV, AVI up to 100MB. Recommended: 1080p or less for optimal streaming.\n                                </p>\n                              </div>\n\n                              {/* Thumbnail Upload */}\n                              <div className=\"mt-4\">\n                                <Label className=\"text-base font-medium\">Thumbnail (Optional)</Label>\n                                <div className=\"flex items-center space-x-4 mt-2\">\n                                  <div className=\"w-16 h-12 bg-muted flex items-center justify-center overflow-hidden rounded\">\n                                    {video.thumbnail ? (\n                                      <img \n                                        src={video.thumbnail} \n                                        alt=\"Video thumbnail\" \n                                        className=\"w-full h-full object-cover\"\n                                      />\n                                    ) : (\n                                      <Camera className=\"w-6 h-6 text-muted-foreground\" />\n                                    )}\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <ObjectUploader\n                                      maxNumberOfFiles={1}\n                                      maxFileSize={5242880} // 5MB for thumbnails\n                                      onGetUploadParameters={handleGetUploadParameters}\n                                      onComplete={handleThumbnailUpload(index)}\n                                      buttonClassName=\"w-full\"\n                                    >\n                                      <Camera className=\"w-4 h-4 mr-2\" />\n                                      {video.thumbnail ? 'Change Thumbnail' : 'Upload Thumbnail'}\n                                    </ObjectUploader>\n                                    {video.isUploadingThumbnail && (\n                                      <p className=\"text-sm text-primary mt-1\">Uploading thumbnail...</p>\n                                    )}\n                                  </div>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                  JPG, PNG up to 5MB. Recommended: 16:9 aspect ratio (e.g., 1280x720px)\n                                </p>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={addVideo}\n                          className=\"w-full\"\n                          data-testid=\"button-add-video\"\n                        >\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Video\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex justify-between mt-8\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation('/')}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                \n                <div className=\"flex gap-2\">\n                  {currentTab !== \"profile\" && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        const tabs = [\"profile\", \"expertise\", \"tools\", \"content\"];\n                        const currentIndex = tabs.indexOf(currentTab);\n                        if (currentIndex > 0) setCurrentTab(tabs[currentIndex - 1]);\n                      }}\n                      data-testid=\"button-previous\"\n                    >\n                      Previous\n                    </Button>\n                  )}\n\n                  {currentTab !== \"content\" ? (\n                    <Button\n                      type=\"button\"\n                      onClick={() => {\n                        const tabs = [\"profile\", \"expertise\", \"tools\", \"content\"];\n                        const currentIndex = tabs.indexOf(currentTab);\n                        if (currentIndex < tabs.length - 1) setCurrentTab(tabs[currentIndex + 1]);\n                      }}\n                      data-testid=\"button-next\"\n                    >\n                      Next\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"submit\"\n                      disabled={registerCoachMutation.isPending}\n                      data-testid=\"button-submit\"\n                    >\n                      {registerCoachMutation.isPending ? \"Creating Profile...\" : \"Complete Registration\"}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":44707},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName} data-testid=\"button-upload\">\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":2894},"server/googleCalendar.ts":{"content":"import { calendar_v3, google } from 'googleapis';\nimport { OAuth2Client } from 'google-auth-library';\nimport { IStorage } from './storage';\n\nexport interface GoogleCalendarEvent {\n  id: string;\n  summary: string;\n  description?: string;\n  start: {\n    dateTime?: string;\n    date?: string;\n  };\n  end: {\n    dateTime?: string;\n    date?: string;\n  };\n  status?: string;\n}\n\nexport interface CalendarSyncResult {\n  syncedEvents: number;\n  errors: string[];\n  lastSyncToken?: string;\n}\n\nexport class GoogleCalendarService {\n  private calendar: calendar_v3.Calendar;\n  private oauth2Client: OAuth2Client;\n\n  constructor() {\n    // Initialize OAuth2 client with environment variables\n    this.oauth2Client = new google.auth.OAuth2(\n      process.env.GOOGLE_CLIENT_ID,\n      process.env.GOOGLE_CLIENT_SECRET,\n      process.env.GOOGLE_REDIRECT_URI\n    );\n\n    this.calendar = google.calendar({ version: 'v3', auth: this.oauth2Client });\n  }\n\n  /**\n   * Get authorization URL for coaches to connect their Google Calendar\n   */\n  getAuthUrl(state?: string): string {\n    const scopes = [\n      'https://www.googleapis.com/auth/calendar',\n      'https://www.googleapis.com/auth/calendar.events'\n    ];\n\n    return this.oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: scopes,\n      prompt: 'consent', // Force consent to get refresh token\n      state: state // CSRF protection\n    });\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  async exchangeCodeForTokens(code: string): Promise<{ accessToken: string; refreshToken: string }> {\n    const { tokens } = await this.oauth2Client.getToken(code);\n    \n    if (!tokens.access_token || !tokens.refresh_token) {\n      throw new Error('Failed to obtain access tokens from Google');\n    }\n\n    return {\n      accessToken: tokens.access_token,\n      refreshToken: tokens.refresh_token\n    };\n  }\n\n  /**\n   * Set refresh token for a coach\n   */\n  setRefreshToken(refreshToken: string) {\n    this.oauth2Client.setCredentials({\n      refresh_token: refreshToken\n    });\n  }\n\n  /**\n   * Get coach's primary calendar ID\n   */\n  async getPrimaryCalendarId(): Promise<string> {\n    try {\n      const response = await this.calendar.calendarList.list();\n      const calendars = response.data.items || [];\n      \n      const primaryCalendar = calendars.find(cal => cal.primary);\n      if (!primaryCalendar?.id) {\n        throw new Error('No primary calendar found');\n      }\n\n      return primaryCalendar.id;\n    } catch (error) {\n      console.error('Error getting primary calendar:', error);\n      throw new Error('Failed to access Google Calendar');\n    }\n  }\n\n  /**\n   * Check if a time slot is available in Google Calendar\n   */\n  async checkAvailability(\n    calendarId: string,\n    startDateTime: string,\n    endDateTime: string\n  ): Promise<boolean> {\n    try {\n      const response = await this.calendar.freebusy.query({\n        requestBody: {\n          timeMin: startDateTime,\n          timeMax: endDateTime,\n          items: [{ id: calendarId }]\n        }\n      });\n\n      const busyTimes = response.data.calendars?.[calendarId]?.busy || [];\n      return busyTimes.length === 0;\n    } catch (error) {\n      console.error('Error checking calendar availability:', error);\n      throw new Error('Failed to check calendar availability');\n    }\n  }\n\n  /**\n   * Create a booking event in Google Calendar\n   */\n  async createBookingEvent(\n    calendarId: string,\n    bookingData: {\n      id: string;\n      title: string;\n      description: string;\n      startDateTime: string;\n      endDateTime: string;\n      studentName: string;\n      location: string;\n    }\n  ): Promise<string> {\n    try {\n      const event = await this.calendar.events.insert({\n        calendarId,\n        requestBody: {\n          summary: bookingData.title,\n          description: `${bookingData.description}\\n\\nStudent: ${bookingData.studentName}\\nLocation: ${bookingData.location}`,\n          start: {\n            dateTime: bookingData.startDateTime,\n            timeZone: 'America/New_York' // TODO: Make this configurable\n          },\n          end: {\n            dateTime: bookingData.endDateTime,\n            timeZone: 'America/New_York'\n          },\n          location: bookingData.location,\n          // Store booking ID in extended properties for two-way sync\n          extendedProperties: {\n            private: {\n              bookingId: bookingData.id,\n              bookingSystem: 'golf-coach-platform'\n            }\n          }\n        }\n      });\n\n      if (!event.data.id) {\n        throw new Error('Failed to create calendar event');\n      }\n\n      return event.data.id;\n    } catch (error) {\n      console.error('Error creating calendar event:', error);\n      throw new Error('Failed to create calendar event');\n    }\n  }\n\n  /**\n   * Update a booking event in Google Calendar\n   */\n  async updateBookingEvent(\n    calendarId: string,\n    eventId: string,\n    bookingData: {\n      title: string;\n      description: string;\n      startDateTime: string;\n      endDateTime: string;\n      studentName: string;\n      location: string;\n    }\n  ): Promise<void> {\n    try {\n      await this.calendar.events.update({\n        calendarId,\n        eventId,\n        requestBody: {\n          summary: bookingData.title,\n          description: `${bookingData.description}\\n\\nStudent: ${bookingData.studentName}\\nLocation: ${bookingData.location}`,\n          start: {\n            dateTime: bookingData.startDateTime,\n            timeZone: 'America/New_York'\n          },\n          end: {\n            dateTime: bookingData.endDateTime,\n            timeZone: 'America/New_York'\n          },\n          location: bookingData.location\n        }\n      });\n    } catch (error) {\n      console.error('Error updating calendar event:', error);\n      throw new Error('Failed to update calendar event');\n    }\n  }\n\n  /**\n   * Delete a booking event from Google Calendar\n   */\n  async deleteBookingEvent(calendarId: string, eventId: string): Promise<void> {\n    try {\n      await this.calendar.events.delete({\n        calendarId,\n        eventId\n      });\n    } catch (error) {\n      console.error('Error deleting calendar event:', error);\n      throw new Error('Failed to delete calendar event');\n    }\n  }\n\n  /**\n   * Sync external calendar events to local database\n   */\n  async syncExternalEvents(\n    storage: IStorage,\n    coachId: string,\n    calendarId: string,\n    syncToken?: string\n  ): Promise<CalendarSyncResult> {\n    try {\n      const response = await this.calendar.events.list({\n        calendarId,\n        syncToken,\n        singleEvents: true,\n        showDeleted: true,\n        maxResults: 250\n      });\n\n      const events = response.data.items || [];\n      const newSyncToken = response.data.nextSyncToken;\n      let syncedEvents = 0;\n      const errors: string[] = [];\n\n      for (const event of events) {\n        try {\n          if (event.status === 'cancelled') {\n            // Remove from local database if it exists\n            if (event.id) {\n              await storage.removeCoachBusyTime(coachId, event.id);\n            }\n          } else if (event.start?.dateTime && event.end?.dateTime) {\n            // Skip events created by our booking system\n            const isOurEvent = event.extendedProperties?.private?.bookingSystem === 'golf-coach-platform';\n            if (!isOurEvent) {\n              // Add/update busy time in local database\n              await storage.updateCoachBusyTime({\n                coachId,\n                startDateTime: new Date(event.start.dateTime),\n                endDateTime: new Date(event.end.dateTime),\n                source: 'google_calendar',\n                externalEventId: event.id || null,\n                title: event.summary || 'Busy'\n              });\n              syncedEvents++;\n            }\n          }\n        } catch (eventError) {\n          console.error('Error processing event:', eventError);\n          errors.push(`Failed to process event ${event.id}: ${eventError}`);\n        }\n      }\n\n      return {\n        syncedEvents,\n        errors,\n        lastSyncToken: newSyncToken || undefined\n      };\n    } catch (error) {\n      console.error('Error syncing calendar events:', error);\n      if ((error as any).code === 410) {\n        // Sync token expired, need full sync\n        return this.syncExternalEvents(storage, coachId, calendarId);\n      }\n      throw new Error('Failed to sync calendar events');\n    }\n  }\n\n  /**\n   * Set up webhook for real-time calendar updates\n   */\n  async setupWebhook(\n    calendarId: string,\n    webhookUrl: string,\n    channelId: string\n  ): Promise<{ channelId: string; resourceId: string; expiration: number }> {\n    try {\n      const response = await this.calendar.events.watch({\n        calendarId,\n        requestBody: {\n          id: channelId,\n          type: 'web_hook',\n          address: webhookUrl,\n          token: process.env.WEBHOOK_VERIFICATION_TOKEN || 'default-token'\n        }\n      });\n\n      return {\n        channelId: response.data.id || channelId,\n        resourceId: response.data.resourceId || '',\n        expiration: parseInt(response.data.expiration || '0')\n      };\n    } catch (error) {\n      console.error('Error setting up webhook:', error);\n      throw new Error('Failed to set up calendar webhook');\n    }\n  }\n\n  /**\n   * Stop webhook notifications\n   */\n  async stopWebhook(channelId: string, resourceId: string): Promise<void> {\n    try {\n      await this.calendar.channels.stop({\n        requestBody: {\n          id: channelId,\n          resourceId: resourceId\n        }\n      });\n    } catch (error) {\n      console.error('Error stopping webhook:', error);\n      throw new Error('Failed to stop calendar webhook');\n    }\n  }\n}","size_bytes":9714},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl.js\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8410},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\ninterface AdminStatus {\n  isAdmin: boolean;\n}\n\ninterface PendingCoach {\n  id: string;\n  name: string;\n  email: string;\n  bio: string;\n  location: string;\n  pricePerHour: string;\n  yearsExperience: number;\n  image?: string;\n  createdAt: string;\n  approvalStatus: string;\n}\n\ninterface Booking {\n  id: string;\n  studentName: string;\n  studentEmail: string;\n  coachName: string;\n  date: string;\n  time: string;\n  status: string;\n  totalAmount: string;\n  createdAt: string;\n}\n\ninterface Coach {\n  id: string;\n  name: string;\n  email: string;\n  bio: string;\n  location: string;\n  pricePerHour: string;\n  yearsExperience: number;\n  image?: string;\n  approvalStatus: string;\n  createdAt: string;\n  userId: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  skillLevel?: string;\n  createdAt: string;\n  userId: string;\n}\n\ninterface AdminAction {\n  id: string;\n  adminEmail: string;\n  action: string;\n  targetType: string;\n  targetId?: string;\n  details?: string;\n  createdAt: string;\n}\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Users, \n  UserCheck, \n  UserX, \n  Calendar, \n  Trash2, \n  Mail, \n  Shield,\n  Clock,\n  DollarSign\n} from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const [emailForm, setEmailForm] = useState({ email: \"\", message: \"\" });\n\n  // Check if user is admin\n  const { data: adminStatus } = useQuery<AdminStatus>({\n    queryKey: [\"/api/admin/check\"],\n  });\n\n  // Get pending coaches\n  const { data: pendingCoaches, isLoading: loadingPending } = useQuery<PendingCoach[]>({\n    queryKey: [\"/api/admin/pending-coaches\"],\n  });\n\n  // Get all bookings\n  const { data: bookings, isLoading: loadingBookings } = useQuery<Booking[]>({\n    queryKey: [\"/api/admin/bookings\"],\n  });\n\n  // Get all coaches\n  const { data: coaches, isLoading: loadingCoaches } = useQuery<Coach[]>({\n    queryKey: [\"/api/admin/coaches\"],\n  });\n\n  // Get all students\n  const { data: students, isLoading: loadingStudents } = useQuery<Student[]>({\n    queryKey: [\"/api/admin/students\"],\n  });\n\n  // Get admin actions log\n  const { data: adminActions } = useQuery<AdminAction[]>({\n    queryKey: [\"/api/admin/actions\"],\n  });\n\n  // Approve coach mutation\n  const approveCoachMutation = useMutation({\n    mutationFn: async (coachId: string) => {\n      const response = await fetch(`/api/admin/approve-coach/${coachId}`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to approve coach\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-coaches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/coaches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/actions\"] });\n      toast({ title: \"Coach approved successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to approve coach\", variant: \"destructive\" });\n    },\n  });\n\n  // Reject coach mutation\n  const rejectCoachMutation = useMutation({\n    mutationFn: async (coachId: string) => {\n      const response = await fetch(`/api/admin/reject-coach/${coachId}`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to reject coach\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-coaches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/coaches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/actions\"] });\n      toast({ title: \"Coach rejected successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to reject coach\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete coach mutation\n  const deleteCoachMutation = useMutation({\n    mutationFn: async (coachId: string) => {\n      const response = await fetch(`/api/admin/coaches/${coachId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete coach\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/coaches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/actions\"] });\n      toast({ title: \"Coach deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete coach\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete student mutation\n  const deleteStudentMutation = useMutation({\n    mutationFn: async (studentId: string) => {\n      const response = await fetch(`/api/admin/students/${studentId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete student\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/students\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/actions\"] });\n      toast({ title: \"Student deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete student\", variant: \"destructive\" });\n    },\n  });\n\n  // Send signup email mutation\n  const sendEmailMutation = useMutation({\n    mutationFn: async (data: { email: string; message?: string }) => {\n      const response = await fetch(\"/api/admin/send-coach-signup\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to send email\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/actions\"] });\n      toast({ title: \"Coach signup email sent successfully\" });\n      setEmailForm({ email: \"\", message: \"\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to send email\", variant: \"destructive\" });\n    },\n  });\n\n  if (!adminStatus?.isAdmin) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Shield className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground\">You don't have permission to access the admin dashboard.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"outline\" className=\"text-yellow-600\">Pending</Badge>;\n      case \"approved\":\n        return <Badge variant=\"default\" className=\"bg-green-600\">Approved</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\">Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatPrice = (price: string) => {\n    return `$${parseFloat(price).toFixed(2)}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\" data-testid=\"admin-dashboard\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Manage coaches, students, and platform operations</p>\n        </div>\n        <Badge variant=\"secondary\" className=\"flex items-center gap-2\">\n          <Shield className=\"h-4 w-4\" />\n          Admin Access\n        </Badge>\n      </div>\n\n      <Tabs defaultValue=\"pending\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n            Pending Coaches ({pendingCoaches?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"bookings\" data-testid=\"tab-bookings\">\n            Bookings ({bookings?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"coaches\" data-testid=\"tab-coaches\">\n            All Coaches ({coaches?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"students\" data-testid=\"tab-students\">\n            Students ({students?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"invite\" data-testid=\"tab-invite\">\n            Invite Coach\n          </TabsTrigger>\n          <TabsTrigger value=\"logs\" data-testid=\"tab-logs\">\n            Activity Logs\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Pending Coaches Tab */}\n        <TabsContent value=\"pending\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5\" />\n                Pending Coach Approvals\n              </CardTitle>\n              <CardDescription>\n                Review and approve new coach registrations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loadingPending ? (\n                <div className=\"text-center py-8\">Loading pending coaches...</div>\n              ) : pendingCoaches?.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No pending coach approvals\n                </div>\n              ) : (\n                <div className=\"grid gap-4\">\n                  {pendingCoaches?.map((coach: any) => (\n                    <Card key={coach.id} className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex gap-4\">\n                          {coach.image && (\n                            <img \n                              src={coach.image} \n                              alt={coach.name}\n                              className=\"h-16 w-16 rounded-full object-cover\"\n                            />\n                          )}\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{coach.name}</h3>\n                            <p className=\"text-sm text-muted-foreground\">{coach.email}</p>\n                            <p className=\"text-sm mt-1\">{coach.location}</p>\n                            <p className=\"text-sm\">{formatPrice(coach.pricePerHour)}/hour</p>\n                            <p className=\"text-sm\">{coach.yearsExperience} years experience</p>\n                            {coach.bio && (\n                              <p className=\"text-sm mt-2 text-muted-foreground line-clamp-2\">\n                                {coach.bio}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            onClick={() => approveCoachMutation.mutate(coach.id)}\n                            disabled={approveCoachMutation.isPending}\n                            data-testid={`approve-coach-${coach.id}`}\n                          >\n                            <UserCheck className=\"h-4 w-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => rejectCoachMutation.mutate(coach.id)}\n                            disabled={rejectCoachMutation.isPending}\n                            data-testid={`reject-coach-${coach.id}`}\n                          >\n                            <UserX className=\"h-4 w-4 mr-1\" />\n                            Reject\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Bookings Tab */}\n        <TabsContent value=\"bookings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                All Lesson Bookings\n              </CardTitle>\n              <CardDescription>\n                View all lessons booked through the platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loadingBookings ? (\n                <div className=\"text-center py-8\">Loading bookings...</div>\n              ) : bookings?.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No bookings found\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {bookings?.map((booking: any) => (\n                    <Card key={booking.id} className=\"p-4\">\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Student</Label>\n                          <p className=\"font-medium\">{booking.studentName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{booking.studentEmail}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Coach</Label>\n                          <p className=\"font-medium\">{booking.coachName}</p>\n                        </div>\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Date & Time</Label>\n                          <p className=\"font-medium\">{formatDate(booking.date)} at {booking.time}</p>\n                          <Badge variant=\"outline\" className=\"mt-1\">{booking.status}</Badge>\n                        </div>\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground\">Price</Label>\n                          <p className=\"font-medium\">{formatPrice(booking.totalAmount)}</p>\n                          <p className=\"text-xs text-muted-foreground\">Booked {formatDate(booking.createdAt)}</p>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* All Coaches Tab */}\n        <TabsContent value=\"coaches\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                All Coaches\n              </CardTitle>\n              <CardDescription>\n                Manage all coaches on the platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loadingCoaches ? (\n                <div className=\"text-center py-8\">Loading coaches...</div>\n              ) : coaches?.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No coaches found\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {coaches?.map((coach: any) => (\n                    <Card key={coach.id} className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex gap-4\">\n                          {coach.image && (\n                            <img \n                              src={coach.image} \n                              alt={coach.name}\n                              className=\"h-12 w-12 rounded-full object-cover\"\n                            />\n                          )}\n                          <div>\n                            <div className=\"flex items-center gap-2\">\n                              <h3 className=\"font-semibold\">{coach.name}</h3>\n                              {getStatusBadge(coach.approvalStatus)}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">{coach.email}</p>\n                            <p className=\"text-sm\">{coach.location} • {formatPrice(coach.pricePerHour)}/hour</p>\n                            <p className=\"text-xs text-muted-foreground\">Registered {formatDate(coach.createdAt)}</p>\n                          </div>\n                        </div>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button size=\"sm\" variant=\"destructive\" data-testid={`delete-coach-${coach.id}`}>\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Coach</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete {coach.name}? This will permanently remove their profile and all associated data. This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deleteCoachMutation.mutate(coach.id)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Delete Coach\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Students Tab */}\n        <TabsContent value=\"students\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                All Students\n              </CardTitle>\n              <CardDescription>\n                Manage all students on the platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loadingStudents ? (\n                <div className=\"text-center py-8\">Loading students...</div>\n              ) : students?.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No students found\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {students?.map((student: any) => (\n                    <Card key={student.id} className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <h3 className=\"font-semibold\">{student.name}</h3>\n                          <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                          {student.phone && (\n                            <p className=\"text-sm\">{student.phone}</p>\n                          )}\n                          {student.skillLevel && (\n                            <Badge variant=\"outline\" className=\"mt-1 capitalize\">\n                              {student.skillLevel}\n                            </Badge>\n                          )}\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Registered {formatDate(student.createdAt)}\n                          </p>\n                        </div>\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button size=\"sm\" variant=\"destructive\" data-testid={`delete-student-${student.id}`}>\n                              <Trash2 className=\"h-4 w-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Student</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete {student.name}? This will permanently remove their account and all associated data. This action cannot be undone.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deleteStudentMutation.mutate(student.id)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Delete Student\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Invite Coach Tab */}\n        <TabsContent value=\"invite\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Mail className=\"h-5 w-5\" />\n                Invite New Coach\n              </CardTitle>\n              <CardDescription>\n                Send coach registration invitations via email\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-w-md\">\n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"coach@example.com\"\n                    value={emailForm.email}\n                    onChange={(e) => setEmailForm(prev => ({ ...prev, email: e.target.value }))}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"message\">Custom Message (Optional)</Label>\n                  <Textarea\n                    id=\"message\"\n                    placeholder=\"Add a personal message to the invitation...\"\n                    value={emailForm.message}\n                    onChange={(e) => setEmailForm(prev => ({ ...prev, message: e.target.value }))}\n                    data-testid=\"input-message\"\n                  />\n                </div>\n                <Button\n                  onClick={() => sendEmailMutation.mutate(emailForm)}\n                  disabled={!emailForm.email || sendEmailMutation.isPending}\n                  data-testid=\"button-send-invitation\"\n                >\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  {sendEmailMutation.isPending ? \"Sending...\" : \"Send Invitation\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Activity Logs Tab */}\n        <TabsContent value=\"logs\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Admin Activity Logs</CardTitle>\n              <CardDescription>\n                Recent admin actions and system events\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {adminActions?.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No activity logs found\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {adminActions?.map((action: any) => (\n                    <Card key={action.id} className=\"p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium text-sm\">\n                            {action.action.replace(/_/g, ' ').toLowerCase().replace(/^./, (str: string) => str.toUpperCase())}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            by {action.adminEmail} • {formatDate(action.createdAt)}\n                          </p>\n                          {action.details && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {JSON.parse(action.details).name || JSON.parse(action.details).email || action.targetId}\n                            </p>\n                          )}\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {action.targetType}\n                        </Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":26556},"server/email.ts":{"content":"// Email service using SendGrid integration\nimport sgMail from '@sendgrid/mail';\n\nexport class EmailService {\n  constructor() {\n    // Initialize SendGrid with API key from environment\n    const apiKey = process.env.SENDGRID_API_KEY;\n    if (!apiKey) {\n      throw new Error('SENDGRID_API_KEY environment variable is required');\n    }\n    sgMail.setApiKey(apiKey);\n  }\n\n  async sendEmail(\n    to: string,\n    subject: string,\n    html: string,\n    from?: string\n  ): Promise<void> {\n    const fromEmail = from || process.env.SENDGRID_FROM_EMAIL || 'noreply@golfcoachplatform.com';\n    \n    const msg = {\n      to,\n      from: fromEmail,\n      subject,\n      html,\n    };\n\n    try {\n      await sgMail.send(msg);\n      console.log(`Email sent successfully to ${to}`);\n    } catch (error) {\n      console.error('SendGrid error:', error);\n      throw new Error('Failed to send email');\n    }\n  }\n\n  async sendCoachInvitation(\n    email: string, \n    signupUrl: string, \n    customMessage?: string\n  ): Promise<void> {\n    const message = customMessage || \"You've been invited to join our golf coaching platform as a PGA certified instructor.\";\n    \n    const html = `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #2c5530;\">Golf Coach Platform Invitation</h2>\n        <p>${message}</p>\n        <p>Click the link below to register as a coach:</p>\n        <div style=\"text-align: center; margin: 30px 0;\">\n          <a href=\"${signupUrl}\" \n             style=\"background: #2c5530; color: white; padding: 14px 28px; text-decoration: none; border-radius: 6px; display: inline-block; font-weight: bold;\">\n            Register as Coach\n          </a>\n        </div>\n        <p style=\"color: #666; font-size: 14px;\">Or copy and paste this URL: ${signupUrl}</p>\n        <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #eee;\">\n        <p style=\"color: #666; font-size: 12px;\">\n          Best regards,<br>\n          The Golf Coach Team\n        </p>\n      </div>\n    `;\n\n    await this.sendEmail(email, \"Invitation to Join Golf Coach Platform\", html);\n  }\n}","size_bytes":2124},"client/src/pages/inbox.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { MessageCircle, Send, Search, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n}\n\ninterface Message {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  content: string;\n  isRead: boolean;\n  createdAt: string;\n  bookingId?: string;\n  senderName?: string;\n  receiverName?: string;\n}\n\ninterface Conversation {\n  userId: string;\n  userName: string;\n  lastMessage: string;\n  lastMessageTime: string;\n  unreadCount: number;\n  messages: Message[];\n}\n\nexport default function Inbox() {\n  const [, setLocation] = useLocation();\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingMessages, setIsLoadingMessages] = useState(false);\n  const [isSending, setIsSending] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    loadInbox();\n  }, []);\n\n  const loadInbox = async () => {\n    try {\n      // Check authentication\n      const authResponse = await fetch('/api/auth/me', {\n        credentials: 'include',\n      });\n      \n      if (!authResponse.ok) {\n        setLocation('/');\n        return;\n      }\n\n      const authData = await authResponse.json();\n      setCurrentUser(authData.user);\n\n      // Load conversations\n      const conversationsResponse = await fetch('/api/messages/conversations', {\n        credentials: 'include',\n      });\n\n      if (conversationsResponse.ok) {\n        const conversationsData = await conversationsResponse.json();\n        setConversations(conversationsData.conversations || []);\n      }\n    } catch (error) {\n      console.error('Error loading inbox:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadConversation = async (conversation: Conversation) => {\n    if (selectedConversation?.userId === conversation.userId) {\n      return; // Already loaded\n    }\n\n    setIsLoadingMessages(true);\n    setSelectedConversation(conversation);\n\n    try {\n      const response = await fetch(`/api/messages/conversation/${conversation.userId}`, {\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setMessages(data.messages || []);\n        \n        // Mark messages as read\n        await markMessagesAsRead(conversation.userId);\n      }\n    } catch (error) {\n      console.error('Error loading conversation:', error);\n    } finally {\n      setIsLoadingMessages(false);\n    }\n  };\n\n  const markMessagesAsRead = async (userId: string) => {\n    try {\n      await fetch(`/api/messages/mark-read/${userId}`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n\n      // Update conversations to reflect read status\n      setConversations(prev => \n        prev.map(conv => \n          conv.userId === userId \n            ? { ...conv, unreadCount: 0 }\n            : conv\n        )\n      );\n    } catch (error) {\n      console.error('Error marking messages as read:', error);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!selectedConversation || !newMessage.trim() || isSending) {\n      return;\n    }\n\n    setIsSending(true);\n\n    try {\n      const response = await fetch('/api/messages/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          receiverId: selectedConversation.userId,\n          content: newMessage.trim(),\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        \n        // Add the new message to the current conversation\n        setMessages(prev => [...prev, data.message]);\n        \n        // Update the conversation preview\n        setConversations(prev => \n          prev.map(conv => \n            conv.userId === selectedConversation.userId\n              ? { \n                  ...conv, \n                  lastMessage: newMessage.trim(),\n                  lastMessageTime: new Date().toISOString(),\n                }\n              : conv\n          )\n        );\n        \n        setNewMessage(\"\");\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setIsSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const getFilteredConversations = () => {\n    if (!searchTerm.trim()) {\n      return conversations;\n    }\n    \n    const term = searchTerm.toLowerCase();\n    return conversations.filter(conv => \n      conv.userName.toLowerCase().includes(term)\n    );\n  };\n\n  const getUserInitials = (name: string) => {\n    return name.slice(0, 2).toUpperCase();\n  };\n\n  const formatMessageTime = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n    if (diffInHours < 24) {\n      return date.toLocaleTimeString('en-US', { \n        hour: 'numeric', \n        minute: '2-digit', \n        hour12: true \n      });\n    } else if (diffInHours < 24 * 7) {\n      return date.toLocaleDateString('en-US', { weekday: 'short' });\n    } else {\n      return date.toLocaleDateString('en-US', { \n        month: 'short', \n        day: 'numeric' \n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse\">Loading inbox...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return null;\n  }\n\n  const filteredConversations = getFilteredConversations();\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Link href=\"/profile\">\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-to-profile\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            Inbox\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Messages from your {currentUser.role === 'coach' ? 'students' : 'coaches'}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[600px]\">\n        {/* Conversations List */}\n        <div className=\"space-y-4 lg:col-span-1\">\n          <Card className=\"h-full\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <MessageCircle className=\"w-5 h-5\" />\n                Messages\n              </CardTitle>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search conversations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-conversations\"\n                />\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0 h-[calc(100%-140px)] overflow-y-auto\">\n              {filteredConversations.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <MessageCircle className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No conversations yet</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Messages will appear here when you receive them\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-1\">\n                  {filteredConversations.map((conversation) => (\n                    <div\n                      key={conversation.userId}\n                      onClick={() => loadConversation(conversation)}\n                      className={`\n                        p-4 border-b cursor-pointer hover-elevate\n                        ${selectedConversation?.userId === conversation.userId \n                          ? 'bg-muted' \n                          : ''\n                        }\n                      `}\n                      data-testid={`conversation-${conversation.userId}`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <Avatar className=\"w-10 h-10\">\n                          <AvatarFallback className=\"text-sm\">\n                            {getUserInitials(conversation.userName)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <p className=\"font-medium truncate\">\n                              {conversation.userName}\n                            </p>\n                            <div className=\"flex items-center gap-2\">\n                              {conversation.unreadCount > 0 && (\n                                <Badge variant=\"destructive\" className=\"text-xs\">\n                                  {conversation.unreadCount}\n                                </Badge>\n                              )}\n                              <span className=\"text-xs text-muted-foreground\">\n                                {formatMessageTime(conversation.lastMessageTime)}\n                              </span>\n                            </div>\n                          </div>\n                          <p className={`\n                            text-sm truncate\n                            ${conversation.unreadCount > 0 \n                              ? 'text-foreground font-medium' \n                              : 'text-muted-foreground'\n                            }\n                          `}>\n                            {conversation.lastMessage}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Messages Panel */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"h-full flex flex-col\">\n            {selectedConversation ? (\n              <>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"w-10 h-10\">\n                      <AvatarFallback>\n                        {getUserInitials(selectedConversation.userName)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <CardTitle className=\"text-lg\">\n                        {selectedConversation.userName}\n                      </CardTitle>\n                      <CardDescription>\n                        {currentUser.role === 'coach' ? 'Student' : 'Coach'}\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"flex-1 flex flex-col p-0\">\n                  {/* Messages */}\n                  <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                    {isLoadingMessages ? (\n                      <div className=\"text-center py-8\">\n                        <div className=\"animate-pulse\">Loading messages...</div>\n                      </div>\n                    ) : messages.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <MessageCircle className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                        <p className=\"text-muted-foreground\">No messages yet</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Start the conversation below\n                        </p>\n                      </div>\n                    ) : (\n                      messages.map((message) => (\n                        <div\n                          key={message.id}\n                          className={`\n                            flex gap-3\n                            ${message.senderId === currentUser.id \n                              ? 'justify-end' \n                              : 'justify-start'\n                            }\n                          `}\n                        >\n                          <div\n                            className={`\n                              max-w-xs lg:max-w-md px-4 py-2 rounded-lg\n                              ${message.senderId === currentUser.id\n                                ? 'bg-primary text-primary-foreground'\n                                : 'bg-muted'\n                              }\n                            `}\n                          >\n                            <p className=\"text-sm\">{message.content}</p>\n                            <p className={`\n                              text-xs mt-1\n                              ${message.senderId === currentUser.id\n                                ? 'text-primary-foreground/70'\n                                : 'text-muted-foreground'\n                              }\n                            `}>\n                              {formatMessageTime(message.createdAt)}\n                            </p>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n\n                  <Separator />\n\n                  {/* Message Input */}\n                  <div className=\"p-4\">\n                    <div className=\"flex gap-2\">\n                      <Textarea\n                        placeholder=\"Type your message...\"\n                        value={newMessage}\n                        onChange={(e) => setNewMessage(e.target.value)}\n                        onKeyPress={handleKeyPress}\n                        className=\"resize-none min-h-[40px] max-h-[120px]\"\n                        rows={1}\n                        data-testid=\"textarea-new-message\"\n                      />\n                      <Button \n                        onClick={sendMessage}\n                        disabled={!newMessage.trim() || isSending}\n                        className=\"px-3\"\n                        data-testid=\"button-send-message\"\n                      >\n                        <Send className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-2\">\n                      Press Enter to send, Shift+Enter for new line\n                    </p>\n                  </div>\n                </CardContent>\n              </>\n            ) : (\n              <CardContent className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MessageCircle className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">Select a conversation to view messages</p>\n                </div>\n              </CardContent>\n            )}\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16166},"client/src/pages/my-bookings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, MessageCircle, MapPin, Clock, Filter, Search } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n}\n\ninterface Booking {\n  id: string;\n  date: string;\n  time: string;\n  duration: number;\n  lessonType: string;\n  location: string;\n  status: string;\n  totalAmount: string;\n  notes?: string;\n  coach?: {\n    name: string;\n    image?: string;\n  };\n  student?: {\n    name: string;\n  };\n}\n\nexport default function MyBookings() {\n  const [, setLocation] = useLocation();\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [bookings, setBookings] = useState<Booking[]>([]);\n  const [filteredBookings, setFilteredBookings] = useState<Booking[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  useEffect(() => {\n    loadBookings();\n  }, []);\n\n  useEffect(() => {\n    filterBookings();\n  }, [bookings, searchTerm, statusFilter]);\n\n  const loadBookings = async () => {\n    try {\n      // Check authentication\n      const authResponse = await fetch('/api/auth/me', {\n        credentials: 'include',\n      });\n      \n      if (!authResponse.ok) {\n        setLocation('/');\n        return;\n      }\n\n      const authData = await authResponse.json();\n      setCurrentUser(authData.user);\n\n      // Load bookings\n      const bookingsResponse = await fetch('/api/bookings/my-bookings', {\n        credentials: 'include',\n      });\n\n      if (bookingsResponse.ok) {\n        const bookingsData = await bookingsResponse.json();\n        setBookings(bookingsData.bookings || []);\n      }\n    } catch (error) {\n      console.error('Error loading bookings:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const filterBookings = () => {\n    let filtered = bookings;\n\n    // Filter by status\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(booking => booking.status === statusFilter);\n    }\n\n    // Filter by search term\n    if (searchTerm.trim()) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(booking => \n        (currentUser?.role === 'coach' ? booking.student?.name : booking.coach?.name)\n          ?.toLowerCase().includes(term) ||\n        booking.location.toLowerCase().includes(term) ||\n        booking.lessonType.toLowerCase().includes(term)\n      );\n    }\n\n    setFilteredBookings(filtered);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'default';\n      case 'pending': return 'secondary';\n      case 'completed': return 'outline';\n      case 'cancelled': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  const getUpcomingBookings = () => {\n    const now = new Date();\n    return filteredBookings.filter(booking => {\n      const bookingDate = new Date(booking.date);\n      return bookingDate >= now && booking.status !== 'cancelled' && booking.status !== 'completed';\n    });\n  };\n\n  const getPastBookings = () => {\n    const now = new Date();\n    return filteredBookings.filter(booking => {\n      const bookingDate = new Date(booking.date);\n      return bookingDate < now || booking.status === 'completed';\n    });\n  };\n\n  const getCancelledBookings = () => {\n    return filteredBookings.filter(booking => booking.status === 'cancelled');\n  };\n\n  const sendMessage = async (bookingId: string, recipientName: string) => {\n    // This would open a message modal or navigate to inbox with pre-filled recipient\n    console.log(`Send message for booking ${bookingId} to ${recipientName}`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse\">Loading bookings...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return null;\n  }\n\n  const upcomingBookings = getUpcomingBookings();\n  const pastBookings = getPastBookings();\n  const cancelledBookings = getCancelledBookings();\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n              My Bookings\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Manage your golf lesson bookings\n            </p>\n          </div>\n          <Link href=\"/profile\">\n            <Button variant=\"outline\" data-testid=\"button-back-to-profile\">\n              Back to Profile\n            </Button>\n          </Link>\n        </div>\n\n        {/* Search and Filter */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search by name, location, or lesson type...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-bookings\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"w-4 h-4 text-muted-foreground\" />\n                <select\n                  value={statusFilter}\n                  onChange={(e) => setStatusFilter(e.target.value)}\n                  className=\"px-3 py-2 border border-border rounded-md bg-background\"\n                  data-testid=\"select-status-filter\"\n                >\n                  <option value=\"all\">All Status</option>\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"confirmed\">Confirmed</option>\n                  <option value=\"completed\">Completed</option>\n                  <option value=\"cancelled\">Cancelled</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n              <span>Total: {filteredBookings.length}</span>\n              <span>Upcoming: {upcomingBookings.length}</span>\n              <span>Past: {pastBookings.length}</span>\n              {cancelledBookings.length > 0 && <span>Cancelled: {cancelledBookings.length}</span>}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bookings Tabs */}\n        <Tabs defaultValue=\"upcoming\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"upcoming\" data-testid=\"tab-upcoming\">\n              Upcoming ({upcomingBookings.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"past\" data-testid=\"tab-past\">\n              Past ({pastBookings.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"cancelled\" data-testid=\"tab-cancelled\">\n              Cancelled ({cancelledBookings.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"upcoming\" className=\"space-y-4\">\n            {upcomingBookings.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Calendar className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No upcoming bookings</p>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Your upcoming lessons will appear here\n                  </p>\n                  <Link href=\"/\">\n                    <Button>Find Coaches</Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {upcomingBookings.map((booking) => (\n                  <Card key={booking.id} className=\"hover-elevate\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <h3 className=\"font-semibold text-lg\">\n                              {currentUser.role === 'coach' \n                                ? `Lesson with ${booking.student?.name}`\n                                : `Lesson with ${booking.coach?.name}`\n                              }\n                            </h3>\n                            <Badge variant={getStatusColor(booking.status)}>\n                              {booking.status}\n                            </Badge>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                            <div className=\"flex items-center gap-2\">\n                              <Calendar className=\"w-4 h-4\" />\n                              {new Date(booking.date).toLocaleDateString()}\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"w-4 h-4\" />\n                              {booking.time} ({booking.duration} min)\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"w-4 h-4\" />\n                              {booking.location}\n                            </div>\n                          </div>\n                          <div className=\"mt-2\">\n                            <Badge variant=\"outline\">{booking.lessonType}</Badge>\n                          </div>\n                          {booking.notes && (\n                            <p className=\"mt-3 text-sm text-muted-foreground\">\n                              <strong>Notes:</strong> {booking.notes}\n                            </p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-lg text-primary\">\n                            ${booking.totalAmount}\n                          </p>\n                          <div className=\"mt-2 space-y-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => sendMessage(booking.id, \n                                currentUser.role === 'coach' \n                                  ? booking.student?.name || '' \n                                  : booking.coach?.name || ''\n                              )}\n                              data-testid={`button-message-${booking.id}`}\n                            >\n                              <MessageCircle className=\"w-4 h-4 mr-2\" />\n                              Message\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"past\" className=\"space-y-4\">\n            {pastBookings.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Calendar className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No past bookings</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Your completed lessons will appear here\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {pastBookings.map((booking) => (\n                  <Card key={booking.id} className=\"opacity-90\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <h3 className=\"font-semibold\">\n                              {currentUser.role === 'coach' \n                                ? `Lesson with ${booking.student?.name}`\n                                : `Lesson with ${booking.coach?.name}`\n                              }\n                            </h3>\n                            <Badge variant={getStatusColor(booking.status)}>\n                              {booking.status}\n                            </Badge>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                            <div className=\"flex items-center gap-2\">\n                              <Calendar className=\"w-4 h-4\" />\n                              {new Date(booking.date).toLocaleDateString()}\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"w-4 h-4\" />\n                              {booking.time} ({booking.duration} min)\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"w-4 h-4\" />\n                              {booking.location}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-primary\">\n                            ${booking.totalAmount}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"cancelled\" className=\"space-y-4\">\n            {cancelledBookings.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No cancelled bookings</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {cancelledBookings.map((booking) => (\n                  <Card key={booking.id} className=\"opacity-75\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <h3 className=\"font-semibold line-through\">\n                              {currentUser.role === 'coach' \n                                ? `Lesson with ${booking.student?.name}`\n                                : `Lesson with ${booking.coach?.name}`\n                              }\n                            </h3>\n                            <Badge variant={getStatusColor(booking.status)}>\n                              {booking.status}\n                            </Badge>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                            <div className=\"flex items-center gap-2\">\n                              <Calendar className=\"w-4 h-4\" />\n                              {new Date(booking.date).toLocaleDateString()}\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"w-4 h-4\" />\n                              {booking.time} ({booking.duration} min)\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <MapPin className=\"w-4 h-4\" />\n                              {booking.location}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold line-through text-muted-foreground\">\n                            ${booking.totalAmount}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":17125},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, MessageCircle, User, LogOut, Edit, Mail } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  phone?: string;\n  skillLevel?: string;\n  preferences?: string;\n}\n\ninterface Coach {\n  id: string;\n  name: string;\n  bio: string;\n  location: string;\n  pricePerHour: string;\n  rating: string;\n  reviewCount: number;\n}\n\ninterface Booking {\n  id: string;\n  date: string;\n  time: string;\n  duration: number;\n  lessonType: string;\n  location: string;\n  status: string;\n  totalAmount: string;\n  coach?: {\n    name: string;\n    image?: string;\n  };\n  student?: {\n    name: string;\n  };\n}\n\nexport default function Profile() {\n  const [, setLocation] = useLocation();\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [studentProfile, setStudentProfile] = useState<Student | null>(null);\n  const [coachProfile, setCoachProfile] = useState<Coach | null>(null);\n  const [bookings, setBookings] = useState<Booking[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [unreadMessagesCount, setUnreadMessagesCount] = useState(0);\n\n  useEffect(() => {\n    loadProfile();\n  }, []);\n\n  const loadProfile = async () => {\n    try {\n      // Check authentication\n      const authResponse = await fetch('/api/auth/me', {\n        credentials: 'include',\n      });\n      \n      if (!authResponse.ok) {\n        setLocation('/');\n        return;\n      }\n\n      const authData = await authResponse.json();\n      setCurrentUser(authData.user);\n\n      // Load profile data based on role\n      if (authData.user.role === 'student') {\n        await loadStudentProfile(authData.user.id);\n      } else if (authData.user.role === 'coach') {\n        await loadCoachProfile(authData.user.id);\n      }\n\n      // Load bookings\n      await loadBookings();\n\n      // Load unread messages count\n      await loadUnreadMessagesCount();\n    } catch (error) {\n      console.error('Error loading profile:', error);\n      setLocation('/');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadStudentProfile = async (userId: string) => {\n    try {\n      const response = await fetch(`/api/students/profile/${userId}`, {\n        credentials: 'include',\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setStudentProfile(data.student);\n      }\n    } catch (error) {\n      console.error('Error loading student profile:', error);\n    }\n  };\n\n  const loadCoachProfile = async (userId: string) => {\n    try {\n      const response = await fetch(`/api/coaches/profile/${userId}`, {\n        credentials: 'include',\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCoachProfile(data.coach);\n      }\n    } catch (error) {\n      console.error('Error loading coach profile:', error);\n    }\n  };\n\n  const loadBookings = async () => {\n    try {\n      const response = await fetch('/api/bookings/my-bookings', {\n        credentials: 'include',\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setBookings(data.bookings || []);\n      }\n    } catch (error) {\n      console.error('Error loading bookings:', error);\n    }\n  };\n\n  const loadUnreadMessagesCount = async () => {\n    try {\n      const response = await fetch('/api/messages/unread-count', {\n        credentials: 'include',\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setUnreadMessagesCount(data.count || 0);\n      }\n    } catch (error) {\n      console.error('Error loading unread messages count:', error);\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      \n      if (response.ok) {\n        setLocation('/');\n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  const getUserDisplayName = () => {\n    if (studentProfile) return studentProfile.name;\n    if (coachProfile) return coachProfile.name;\n    if (currentUser) return currentUser.email.split('@')[0];\n    return 'User';\n  };\n\n  const getUserInitials = () => {\n    const name = getUserDisplayName();\n    return name.slice(0, 2).toUpperCase();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'default';\n      case 'pending': return 'secondary';\n      case 'completed': return 'outline';\n      case 'cancelled': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return null;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      <div className=\"space-y-6\">\n        {/* Profile Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"w-16 h-16\">\n                <AvatarFallback className=\"bg-primary text-primary-foreground text-lg\">\n                  {getUserInitials()}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-2xl\" data-testid=\"text-username\">\n                  {getUserDisplayName()}\n                </CardTitle>\n                <CardDescription className=\"flex items-center gap-2\">\n                  <Mail className=\"w-4 h-4\" />\n                  {currentUser.email}\n                  <Badge variant=\"outline\" className=\"ml-2 capitalize\">\n                    {currentUser.role}\n                  </Badge>\n                </CardDescription>\n                {studentProfile?.skillLevel && (\n                  <div className=\"mt-2\">\n                    <Badge variant=\"secondary\">\n                      {studentProfile.skillLevel} level\n                    </Badge>\n                  </div>\n                )}\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-profile\">\n                  <Edit className=\"w-4 h-4 mr-2\" />\n                  Edit Profile\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={handleSignOut} data-testid=\"button-signout-profile\">\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Card className=\"hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                My Bookings\n              </CardTitle>\n              <CardDescription>\n                View and manage your lesson bookings\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold text-primary\">\n                    {bookings.filter(b => b.status !== 'cancelled').length}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Active bookings</p>\n                </div>\n                <Link href=\"/my-bookings\">\n                  <Button data-testid=\"button-view-bookings\">\n                    View All\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageCircle className=\"w-5 h-5\" />\n                Inbox\n                {unreadMessagesCount > 0 && (\n                  <Badge variant=\"destructive\" className=\"ml-2\">\n                    {unreadMessagesCount}\n                  </Badge>\n                )}\n              </CardTitle>\n              <CardDescription>\n                Messages from your coaches\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold text-primary\">\n                    {unreadMessagesCount}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Unread messages</p>\n                </div>\n                <Link href=\"/inbox\">\n                  <Button data-testid=\"button-view-messages\">\n                    View Inbox\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Bookings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Bookings</CardTitle>\n            <CardDescription>\n              Your latest lesson bookings\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {bookings.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No bookings yet</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Start by finding a coach and booking your first lesson\n                </p>\n                <Link href=\"/\">\n                  <Button>Find Coaches</Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {bookings.slice(0, 3).map((booking) => (\n                  <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <p className=\"font-medium\">\n                            {currentUser.role === 'coach' ? booking.student?.name : booking.coach?.name}\n                          </p>\n                          <Badge variant={getStatusColor(booking.status)}>\n                            {booking.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(booking.date).toLocaleDateString()} at {booking.time}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {booking.duration} minutes • {booking.location}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold\">${booking.totalAmount}</p>\n                    </div>\n                  </div>\n                ))}\n                {bookings.length > 3 && (\n                  <div className=\"text-center\">\n                    <Link href=\"/my-bookings\">\n                      <Button variant=\"outline\">View All Bookings</Button>\n                    </Link>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":11974},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin } from \"lucide-react\";\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n  \n  return (\n    <footer className=\"bg-muted/30 border-t mt-auto\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">FairwayPro</h3>\n            <p className=\"text-muted-foreground text-sm\">\n              Connect with certified PGA instructors and take your golf game to the next level.\n            </p>\n            <div className=\"flex flex-col space-y-2 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-2\">\n                <MapPin className=\"w-4 h-4\" />\n                <span>Available Nationwide</span>\n              </div>\n            </div>\n          </div>\n\n          {/* For Students */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">For Students</h4>\n            <nav className=\"flex flex-col space-y-2\">\n              <Link href=\"/\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                Find Coaches\n              </Link>\n              <Link href=\"/my-bookings\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                My Bookings\n              </Link>\n              <Link href=\"/inbox\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                Messages\n              </Link>\n              <Link href=\"/profile\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                My Profile\n              </Link>\n            </nav>\n          </div>\n\n          {/* For Coaches */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">For Coaches</h4>\n            <nav className=\"flex flex-col space-y-2\">\n              <Link href=\"/coach-registration\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                Become a Coach\n              </Link>\n              <Link href=\"/profile\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                Coach Dashboard\n              </Link>\n              <Link href=\"/inbox\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                Messages\n              </Link>\n              <Button variant=\"ghost\" className=\"justify-start p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                Coach Resources\n              </Button>\n            </nav>\n          </div>\n\n          {/* Company */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-semibold\">Company</h4>\n            <nav className=\"flex flex-col space-y-2\">\n              <Button variant=\"ghost\" className=\"justify-start p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                About Us\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                How It Works\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                Safety & Trust\n              </Button>\n              <Button variant=\"ghost\" className=\"justify-start p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                Contact Us\n              </Button>\n            </nav>\n          </div>\n        </div>\n\n        <Separator className=\"my-8\" />\n\n        {/* Bottom Section */}\n        <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n          <div className=\"flex flex-col md:flex-row items-center gap-4 text-sm text-muted-foreground\">\n            <span>© {currentYear} FairwayPro. All rights reserved.</span>\n            <div className=\"flex items-center gap-4\">\n              <Button variant=\"ghost\" className=\"p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                Privacy Policy\n              </Button>\n              <Button variant=\"ghost\" className=\"p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                Terms of Service\n              </Button>\n              <Button variant=\"ghost\" className=\"p-0 h-auto text-sm text-muted-foreground hover:text-foreground\">\n                Cookie Policy\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"text-sm text-muted-foreground\">\n            Professional Golf Instruction Platform\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":4933},"shared/googleReviews.ts":{"content":"// Google Reviews utilities for extracting and fetching review data\n\nexport interface GoogleReviewsData {\n  rating: number;\n  reviewCount: number;\n  businessName?: string;\n  placeId?: string;\n  isValid: boolean;\n  error?: string;\n}\n\n/**\n * Validates if a URL is a valid Google Reviews URL\n */\nexport function isValidGoogleReviewsUrl(url: string): boolean {\n  if (!url) return false;\n  \n  try {\n    const urlObj = new URL(url);\n    const hostname = urlObj.hostname.toLowerCase();\n    \n    // Valid Google domains for reviews\n    const validDomains = [\n      'maps.google.com',\n      'www.google.com',\n      'google.com',\n      'g.page',\n      'maps.app.goo.gl'\n    ];\n    \n    // Check if it's a valid Google domain\n    const isValidDomain = validDomains.some(domain => \n      hostname === domain || hostname.endsWith('.' + domain)\n    );\n    \n    if (!isValidDomain) return false;\n    \n    // Check for review-related paths\n    const path = urlObj.pathname + urlObj.search;\n    const reviewPatterns = [\n      /\\/review/i,\n      /\\/place\\/.*\\/reviews/i,\n      /data=.*reviews/i,\n      /g\\.page\\/r\\//i\n    ];\n    \n    return reviewPatterns.some(pattern => pattern.test(path));\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extracts place ID from Google Maps URL if possible\n */\nexport function extractPlaceId(url: string): string | null {\n  try {\n    const urlObj = new URL(url);\n    \n    // Try to extract from various URL formats\n    const patterns = [\n      /place\\/([^\\/]+)/,\n      /data=.*!1m14.*!1m8.*!3m7.*!1s([^!]+)/,\n      /data=.*!4m5.*!3m4.*!1s([^!]+)/,\n      /ftid=([^&]+)/\n    ];\n    \n    const fullUrl = url;\n    for (const pattern of patterns) {\n      const match = fullUrl.match(pattern);\n      if (match && match[1]) {\n        return decodeURIComponent(match[1]);\n      }\n    }\n    \n    return null;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Mock function to simulate fetching Google Reviews data\n * In a real implementation, this would use Google Places API or similar service\n */\nexport async function fetchGoogleReviewsData(url: string): Promise<GoogleReviewsData> {\n  // Validate URL format first\n  if (!isValidGoogleReviewsUrl(url)) {\n    return {\n      rating: 0,\n      reviewCount: 0,\n      isValid: false,\n      error: 'Invalid Google Reviews URL format'\n    };\n  }\n  \n  try {\n    // Extract place ID for potential API calls\n    const placeId = extractPlaceId(url);\n    \n    // For now, return mock data based on URL to simulate API response\n    // In a real implementation, you would:\n    // 1. Use Google Places API with the place ID\n    // 2. Or use a web scraping service\n    // 3. Or integrate with a third-party reviews API\n    \n    const mockRatings = [4.1, 4.3, 4.5, 4.7, 4.8, 4.9];\n    const mockCounts = [23, 45, 67, 89, 112, 156, 234, 278, 334, 445];\n    \n    // Generate consistent mock data based on URL hash\n    const urlHash = url.split('').reduce((a, b) => {\n      a = ((a << 5) - a) + b.charCodeAt(0);\n      return a & a;\n    }, 0);\n    \n    const rating = mockRatings[Math.abs(urlHash) % mockRatings.length];\n    const reviewCount = mockCounts[Math.abs(urlHash) % mockCounts.length];\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return {\n      rating,\n      reviewCount,\n      placeId: placeId || undefined,\n      isValid: true\n    };\n  } catch (error) {\n    return {\n      rating: 0,\n      reviewCount: 0,\n      isValid: false,\n      error: 'Failed to fetch Google Reviews data'\n    };\n  }\n}\n\n/**\n * Formats rating for display\n */\nexport function formatRating(rating: number): string {\n  return rating.toFixed(1);\n}\n\n/**\n * Formats review count for display\n */\nexport function formatReviewCount(count: number): string {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}k`;\n  }\n  return count.toString();\n}","size_bytes":3815}},"version":1}